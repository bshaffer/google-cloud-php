<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/compute/v1/compute.proto

namespace Google\Cloud\Compute\V1\Rule;

use UnexpectedValueException;

/**
 * Protobuf type <code>google.cloud.compute.v1.Rule.Action</code>
 */
class Action
{
    /**
     * Generated from protobuf enum <code>ALLOW = 0;</code>
     */
    const ALLOW = 0;
    /**
     * Generated from protobuf enum <code>ALLOW_WITH_LOG = 1;</code>
     */
    const ALLOW_WITH_LOG = 1;
    /**
     * Generated from protobuf enum <code>DENY = 2;</code>
     */
    const DENY = 2;
    /**
     * Generated from protobuf enum <code>DENY_WITH_LOG = 3;</code>
     */
    const DENY_WITH_LOG = 3;
    /**
     * Generated from protobuf enum <code>LOG = 4;</code>
     */
    const LOG = 4;
    /**
     * Generated from protobuf enum <code>NO_ACTION = 5;</code>
     */
    const NO_ACTION = 5;

    private static $valueToName = [
        self::ALLOW => 'ALLOW',
        self::ALLOW_WITH_LOG => 'ALLOW_WITH_LOG',
        self::DENY => 'DENY',
        self::DENY_WITH_LOG => 'DENY_WITH_LOG',
        self::LOG => 'LOG',
        self::NO_ACTION => 'NO_ACTION',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Action::class, \Google\Cloud\Compute\V1\Rule_Action::class);

