<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/compute/v1/compute.proto

namespace Google\Cloud\Compute\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>google.cloud.compute.v1.UrlRewrite</code>
 */
class UrlRewrite extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>string host_rewrite = 1;</code>
     */
    protected $host_rewrite = '';
    /**
     * Generated from protobuf field <code>string path_prefix_rewrite = 2;</code>
     */
    protected $path_prefix_rewrite = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $host_rewrite
     *     @type string $path_prefix_rewrite
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Compute\V1\Compute::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string host_rewrite = 1;</code>
     * @return string
     */
    public function getHostRewrite()
    {
        return $this->host_rewrite;
    }

    /**
     * Generated from protobuf field <code>string host_rewrite = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setHostRewrite($var)
    {
        GPBUtil::checkString($var, True);
        $this->host_rewrite = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string path_prefix_rewrite = 2;</code>
     * @return string
     */
    public function getPathPrefixRewrite()
    {
        return $this->path_prefix_rewrite;
    }

    /**
     * Generated from protobuf field <code>string path_prefix_rewrite = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setPathPrefixRewrite($var)
    {
        GPBUtil::checkString($var, True);
        $this->path_prefix_rewrite = $var;

        return $this;
    }

}

