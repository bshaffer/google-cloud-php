syntax = "proto3";

package google.cloud.compute.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/resource.proto";

option csharp_namespace = "Google.Cloud.Compute.V1";
option go_package = "google.golang.org/genproto/googleapis/cloud/compute/v1;compute";
option java_multiple_files = true;
option java_package = "com.google.cloud.compute.v1";
option php_namespace = "Google\\Cloud\\Compute\\V1";
option ruby_package = "Google::Cloud::Compute::V1";

//
// File level resource definitions
//

// [Empty]

//
// Messages
//
message HTTP2HealthCheck {
  enum PortSpecification {
    USE_FIXED_PORT = 0;
    USE_NAMED_PORT = 1;
    USE_SERVING_PORT = 2;
  }

  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  string host = 1;
  int32 port = 2;
  string port_name = 3;
  PortSpecification port_specification = 4;
  ProxyHeader proxy_header = 5;
  string request_path = 6;
  string response = 7;
}

message HTTPHealthCheck {
  enum PortSpecification {
    USE_FIXED_PORT = 0;
    USE_NAMED_PORT = 1;
    USE_SERVING_PORT = 2;
  }

  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  string host = 1;
  int32 port = 2;
  string port_name = 3;
  PortSpecification port_specification = 4;
  ProxyHeader proxy_header = 5;
  string request_path = 6;
  string response = 7;
}

message HTTPSHealthCheck {
  enum PortSpecification {
    USE_FIXED_PORT = 0;
    USE_NAMED_PORT = 1;
    USE_SERVING_PORT = 2;
  }

  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  string host = 1;
  int32 port = 2;
  string port_name = 3;
  PortSpecification port_specification = 4;
  ProxyHeader proxy_header = 5;
  string request_path = 6;
  string response = 7;
}

message SSLHealthCheck {
  enum PortSpecification {
    USE_FIXED_PORT = 0;
    USE_NAMED_PORT = 1;
    USE_SERVING_PORT = 2;
  }

  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  int32 port = 1;
  string port_name = 2;
  PortSpecification port_specification = 3;
  ProxyHeader proxy_header = 4;
  string request = 5;
  string response = 6;
}

message TCPHealthCheck {
  enum PortSpecification {
    USE_FIXED_PORT = 0;
    USE_NAMED_PORT = 1;
    USE_SERVING_PORT = 2;
  }

  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  int32 port = 1;
  string port_name = 2;
  PortSpecification port_specification = 3;
  ProxyHeader proxy_header = 4;
  string request = 5;
  string response = 6;
}

message HealthCheck {
  enum Type {
    HTTP = 0;
    HTTP2 = 1;
    HTTPS = 2;
    INVALID = 3;
    SSL = 4;
    TCP = 5;
  }

  int32 check_interval_sec = 1;
  string creation_timestamp = 2;
  string description = 3;
  int32 healthy_threshold = 4;
  HTTP2HealthCheck http2_health_check = 5;
  HTTPHealthCheck http_health_check = 6;
  HTTPSHealthCheck https_health_check = 7;
  string id = 8;
  string kind = 9;
  string name = 10;
  string region = 11;
  string self_link = 12;
  SSLHealthCheck ssl_health_check = 13;
  TCPHealthCheck tcp_health_check = 14;
  int32 timeout_sec = 15;
  Type type = 16;
  int32 unhealthy_threshold = 17;
}

message BackendServiceIAP {
  bool enabled = 1;
  string oauth2_client_id = 2;
  string oauth2_client_secret = 3;
  string oauth2_client_secret_sha256 = 4;
}

message BackendServiceLogConfig {
  bool enable = 1;
  float sample_rate = 2;
}

message DiskTypesScopedList {
  repeated DiskType disk_types = 1;
  Warning warning = 2;
}

message Data {
  string key = 1;
  string value = 2;
}

message Warning {
  enum Code {
    CLEANUP_FAILED = 0;
    DEPRECATED_RESOURCE_USED = 1;
    DEPRECATED_TYPE_USED = 2;
    DISK_SIZE_LARGER_THAN_IMAGE_SIZE = 3;
    EXPERIMENTAL_TYPE_USED = 4;
    EXTERNAL_API_WARNING = 5;
    FIELD_VALUE_OVERRIDEN = 6;
    INJECTED_KERNELS_DEPRECATED = 7;
    MISSING_TYPE_DEPENDENCY = 8;
    NEXT_HOP_ADDRESS_NOT_ASSIGNED = 9;
    NEXT_HOP_CANNOT_IP_FORWARD = 10;
    NEXT_HOP_INSTANCE_NOT_FOUND = 11;
    NEXT_HOP_INSTANCE_NOT_ON_NETWORK = 12;
    NEXT_HOP_NOT_RUNNING = 13;
    NOT_CRITICAL_ERROR = 14;
    NO_RESULTS_ON_PAGE = 15;
    REQUIRED_TOS_AGREEMENT = 16;
    RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING = 17;
    RESOURCE_NOT_DELETED = 18;
    SCHEMA_VALIDATION_IGNORED = 19;
    SINGLE_INSTANCE_PROPERTY_TEMPLATE = 20;
    UNDECLARED_PROPERTIES = 21;
    UNREACHABLE = 22;
  }

  Code code = 1;
  repeated Data data = 2;
  string message = 3;
}

message DiskTypeAggregatedList {
  string id = 1;
  map<string, DiskTypesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RegionInstanceGroupManagersDeleteInstancesRequest {
  repeated string instances = 1;
}

message Autoscaler {
  enum Status {
    ACTIVE = 0;
    DELETING = 1;
    ERROR = 2;
    PENDING = 3;
  }

  AutoscalingPolicy autoscaling_policy = 1;
  string creation_timestamp = 2;
  string description = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  int32 recommended_size = 7;
  string region = 8;
  string self_link = 9;
  Status status = 10;
  repeated AutoscalerStatusDetails status_details = 11;
  string target = 12;
  string zone = 13;
}

message AutoscalersScopedList {
  repeated Autoscaler autoscalers = 1;
  Warning warning = 2;
}

message NodeGroupsScopedList {
  repeated NodeGroup node_groups = 1;
  Warning warning = 2;
}

message NodeGroupAggregatedList {
  string id = 1;
  map<string, NodeGroupsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message HttpHeaderOption {
  string header_name = 1;
  string header_value = 2;
  bool replace = 3;
}

message HttpHeaderAction {
  repeated HttpHeaderOption request_headers_to_add = 1;
  repeated string request_headers_to_remove = 2;
  repeated HttpHeaderOption response_headers_to_add = 3;
  repeated string response_headers_to_remove = 4;
}

message GuestAttributesEntry {
  string key = 1;
  string namespace = 2;
  string value = 3;
}

message GuestAttributesValue {
  repeated GuestAttributesEntry items = 1;
}

message RegionDisksRemoveResourcePoliciesRequest {
  repeated string resource_policies = 1;
}

message Tags {
  string fingerprint = 1;
  repeated string items = 2;
}

message NetworkRoutingConfig {
  enum RoutingMode {
    GLOBAL = 0;
    REGIONAL = 1;
  }

  RoutingMode routing_mode = 1;
}

message TestFailure {
  string actual_service = 1;
  string expected_service = 2;
  string host = 3;
  string path = 4;
}

message UrlMapValidationResult {
  repeated string load_errors = 1;
  bool load_succeeded = 2;
  repeated TestFailure test_failures = 3;
  bool test_passed = 4;
}

message InstanceGroupManagersScopedList {
  repeated InstanceGroupManager instance_group_managers = 1;
  Warning warning = 2;
}

message InstanceGroupManagerAggregatedList {
  string id = 1;
  map<string, InstanceGroupManagersScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetHttpsProxy {
  enum QuicOverride {
    DISABLE = 0;
    ENABLE = 1;
    NONE = 2;
  }

  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  string name = 5;
  QuicOverride quic_override = 6;
  string region = 7;
  string self_link = 8;
  repeated string ssl_certificates = 9;
  string ssl_policy = 10;
  string url_map = 11;
}

message TargetHttpsProxiesScopedList {
  repeated TargetHttpsProxy target_https_proxies = 1;
  Warning warning = 2;
}

message HealthStatus {
  enum HealthState {
    HEALTHY = 0;
    UNHEALTHY = 1;
  }

  HealthState health_state = 1;
  string instance = 2;
  string ip_address = 3;
  int32 port = 4;
}

message TargetPoolInstanceHealth {
  repeated HealthStatus health_status = 1;
  string kind = 2;
}

message InstanceGroupManager {
  repeated InstanceGroupManagerAutoHealingPolicy auto_healing_policies = 1;
  string base_instance_name = 2;
  string creation_timestamp = 3;
  InstanceGroupManagerActionsSummary current_actions = 4;
  string description = 5;
  DistributionPolicy distribution_policy = 6;
  string fingerprint = 7;
  string id = 8;
  string instance_group = 9;
  string instance_template = 10;
  string kind = 11;
  string name = 12;
  repeated NamedPort named_ports = 13;
  string region = 14;
  string self_link = 15;
  InstanceGroupManagerStatus status = 16;
  repeated string target_pools = 17;
  int32 target_size = 18;
  InstanceGroupManagerUpdatePolicy update_policy = 19;
  repeated InstanceGroupManagerVersion versions = 20;
  string zone = 21;
}

message RegionInstanceGroupManagerList {
  string id = 1;
  repeated InstanceGroupManager items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceGroupManagersSetTargetPoolsRequest {
  string fingerprint = 1;
  repeated string target_pools = 2;
}

message InterconnectLocationRegionInfo {
  enum LocationPresence {
    GLOBAL = 0;
    LOCAL_REGION = 1;
    LP_GLOBAL = 2;
    LP_LOCAL_REGION = 3;
  }

  string expected_rtt_ms = 1;
  LocationPresence location_presence = 2;
  string region = 3;
}

message InterconnectDiagnostics {
  repeated InterconnectDiagnosticsARPEntry arp_caches = 1;
  repeated InterconnectDiagnosticsLinkStatus links = 2;
  string mac_address = 3;
}

message InterconnectsGetDiagnosticsResponse {
  InterconnectDiagnostics result = 1;
}

message ManagedInstanceInstanceHealth {
  enum DetailedHealthState {
    DRAINING = 0;
    HEALTHY = 1;
    TIMEOUT = 2;
    UNHEALTHY = 3;
    UNKNOWN = 4;
  }

  DetailedHealthState detailed_health_state = 1;
  string health_check = 2;
}

message VpnTunnel {
  enum Status {
    ALLOCATING_RESOURCES = 0;
    AUTHORIZATION_ERROR = 1;
    DEPROVISIONING = 2;
    ESTABLISHED = 3;
    FAILED = 4;
    FIRST_HANDSHAKE = 5;
    NEGOTIATION_FAILURE = 6;
    NETWORK_ERROR = 7;
    NO_INCOMING_PACKETS = 8;
    PROVISIONING = 9;
    REJECTED = 10;
    STOPPED = 11;
    WAITING_FOR_FULL_CONFIG = 12;
  }

  string creation_timestamp = 1;
  string description = 2;
  string detailed_status = 3;
  string id = 4;
  int32 ike_version = 5;
  string kind = 6;
  repeated string local_traffic_selector = 7;
  string name = 8;
  string peer_external_gateway = 9;
  int32 peer_external_gateway_interface = 10;
  string peer_gcp_gateway = 11;
  string peer_ip = 12;
  string region = 13;
  repeated string remote_traffic_selector = 14;
  string router = 15;
  string self_link = 16;
  string shared_secret = 17;
  string shared_secret_hash = 18;
  Status status = 19;
  string target_vpn_gateway = 20;
  string vpn_gateway = 21;
  int32 vpn_gateway_interface = 22;
}

message SslPoliciesListAvailableFeaturesResponse {
  repeated string features = 1;
}

message CustomerEncryptionKeyProtectedDisk {
  CustomerEncryptionKey disk_encryption_key = 1;
  string source = 2;
}

message InstancesStartWithEncryptionKeyRequest {
  repeated CustomerEncryptionKeyProtectedDisk disks = 1;
}

message AttachedDisk {
  enum Interface {
    NVME = 0;
    SCSI = 1;
  }

  enum Mode {
    READ_ONLY = 0;
    READ_WRITE = 1;
  }

  enum Type {
    PERSISTENT = 0;
    SCRATCH = 1;
  }

  bool auto_delete = 1;
  bool boot = 2;
  string device_name = 3;
  CustomerEncryptionKey disk_encryption_key = 4;
  string disk_size_gb = 5;
  repeated GuestOsFeature guest_os_features = 6;
  int32 index = 7;
  AttachedDiskInitializeParams initialize_params = 8;
  Interface interface = 9;
  string kind = 10;
  repeated string licenses = 11;
  Mode mode = 12;
  InitialStateConfig shielded_instance_initial_state = 13;
  string source = 14;
  Type type = 15;
}

message DisplayDevice {
  bool enable_display = 1;
}

message AcceleratorConfig {
  int32 accelerator_count = 1;
  string accelerator_type = 2;
}

message Metadata {
  string fingerprint = 1;
  repeated Items items = 2;
  string kind = 3;
}

message NetworkInterface {
  repeated AccessConfig access_configs = 1;
  repeated AliasIpRange alias_ip_ranges = 2;
  string fingerprint = 3;
  string kind = 4;
  string name = 5;
  string network = 6;
  string network_i_p = 7;
  string subnetwork = 8;
}

message ReservationAffinity {
  enum ConsumeReservationType {
    ANY_RESERVATION = 0;
    NO_RESERVATION = 1;
    SPECIFIC_RESERVATION = 2;
    UNSPECIFIED = 3;
  }

  ConsumeReservationType consume_reservation_type = 1;
  string key = 2;
  repeated string values = 3;
}

message Scheduling {
  enum OnHostMaintenance {
    MIGRATE = 0;
    TERMINATE = 1;
  }

  bool automatic_restart = 1;
  repeated SchedulingNodeAffinity node_affinities = 2;
  OnHostMaintenance on_host_maintenance = 3;
  bool preemptible = 4;
}

message ServiceAccount {
  string email = 1;
  repeated string scopes = 2;
}

message ShieldedInstanceConfig {
  bool enable_integrity_monitoring = 1;
  bool enable_secure_boot = 2;
  bool enable_vtpm = 3;
}

message ShieldedInstanceIntegrityPolicy {
  bool update_auto_learn_policy = 1;
}

message Instance {
  enum Status {
    DEPROVISIONING = 0;
    PROVISIONING = 1;
    REPAIRING = 2;
    RUNNING = 3;
    STAGING = 4;
    STOPPED = 5;
    STOPPING = 6;
    SUSPENDED = 7;
    SUSPENDING = 8;
    TERMINATED = 9;
  }

  bool can_ip_forward = 1;
  string cpu_platform = 2;
  string creation_timestamp = 3;
  bool deletion_protection = 4;
  string description = 5;
  repeated AttachedDisk disks = 6;
  DisplayDevice display_device = 7;
  string fingerprint = 8;
  repeated AcceleratorConfig guest_accelerators = 9;
  string hostname = 10;
  string id = 11;
  string kind = 12;
  string label_fingerprint = 13;
  map<string, string> labels = 14;
  string machine_type = 15;
  Metadata metadata = 16;
  string min_cpu_platform = 17;
  string name = 18;
  repeated NetworkInterface network_interfaces = 19;
  ReservationAffinity reservation_affinity = 20;
  Scheduling scheduling = 21;
  string self_link = 22;
  repeated ServiceAccount service_accounts = 23;
  ShieldedInstanceConfig shielded_instance_config = 24;
  ShieldedInstanceIntegrityPolicy shielded_instance_integrity_policy = 25;
  bool start_restricted = 26;
  Status status = 27;
  string status_message = 28;
  Tags tags = 29;
  string zone = 30;
}

message AliasIpRange {
  string ip_cidr_range = 1;
  string subnetwork_range_name = 2;
}

message SslCertificate {
  string certificate = 1;
  string creation_timestamp = 2;
  string description = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  string private_key = 7;
  string region = 8;
  string self_link = 9;
}

message SslCertificateList {
  string id = 1;
  repeated SslCertificate items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceManagedByIgmErrorManagedInstanceError {
  string code = 1;
  string message = 2;
}

message InstanceManagedByIgmErrorInstanceActionDetails {
  enum Action {
    ABANDONING = 0;
    CREATING = 1;
    CREATING_WITHOUT_RETRIES = 2;
    DELETING = 3;
    NONE = 4;
    RECREATING = 5;
    REFRESHING = 6;
    RESTARTING = 7;
    VERIFYING = 8;
  }

  Action action = 1;
  string instance = 2;
  ManagedInstanceVersion version = 3;
}

message InstanceManagedByIgmError {
  InstanceManagedByIgmErrorManagedInstanceError error = 1;
  InstanceManagedByIgmErrorInstanceActionDetails instance_action_details = 2;
  string timestamp = 3;
}

message VpnGatewayStatusVpnConnection {
  string peer_external_gateway = 1;
  string peer_gcp_gateway = 2;
  VpnGatewayStatusHighAvailabilityRequirementState state = 3;
  repeated VpnGatewayStatusTunnel tunnels = 4;
}

message VpnGatewayStatus {
  repeated VpnGatewayStatusVpnConnection vpn_connections = 1;
}

message FixedOrPercent {
  int32 calculated = 1;
  int32 fixed = 2;
  int32 percent = 3;
}

message InstanceGroupManagerUpdatePolicy {
  string instance_redistribution_type = 1;
  FixedOrPercent max_surge = 2;
  FixedOrPercent max_unavailable = 3;
  string minimal_action = 4;
  string replacement_method = 5;
  string type = 6;
}

message AutoscalingPolicyCustomMetricUtilization {
  enum UtilizationTargetType {
    DELTA_PER_MINUTE = 0;
    DELTA_PER_SECOND = 1;
    GAUGE = 2;
  }

  string metric = 1;
  double utilization_target = 2;
  UtilizationTargetType utilization_target_type = 3;
}

message RegionDisksAddResourcePoliciesRequest {
  repeated string resource_policies = 1;
}

message ResourcePolicySnapshotSchedulePolicySnapshotProperties {
  bool guest_flush = 1;
  map<string, string> labels = 2;
  repeated string storage_locations = 3;
}

message NodeTemplate {
  enum Status {
    CREATING = 0;
    DELETING = 1;
    INVALID = 2;
    READY = 3;
  }

  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  string name = 5;
  map<string, string> node_affinity_labels = 6;
  string node_type = 7;
  NodeTemplateNodeTypeFlexibility node_type_flexibility = 8;
  string region = 9;
  string self_link = 10;
  ServerBinding server_binding = 11;
  Status status = 12;
  string status_message = 13;
}

message NodeTemplatesScopedList {
  repeated NodeTemplate node_templates = 1;
  Warning warning = 2;
}

message UrlMapsValidateResponse {
  UrlMapValidationResult result = 1;
}

message SignedUrlKey {
  string key_name = 1;
  string key_value = 2;
}

message SchedulingNodeAffinity {
  enum Operator {
    IN = 0;
    NOT_IN = 1;
    OPERATOR_UNSPECIFIED = 2;
  }

  string key = 1;
  Operator operator = 2;
  repeated string values = 3;
}

message HttpFaultAbort {
  uint32 http_status = 1;
  double percentage = 2;
}

message HttpFaultDelay {
  Duration fixed_delay = 1;
  double percentage = 2;
}

message HttpFaultInjection {
  HttpFaultAbort abort = 1;
  HttpFaultDelay delay = 2;
}

message AuditLogConfig {
  enum LogType {
    ADMIN_READ = 0;
    DATA_READ = 1;
    DATA_WRITE = 2;
    LOG_TYPE_UNSPECIFIED = 3;
  }

  repeated string exempted_members = 1;
  bool ignore_child_exemptions = 2;
  LogType log_type = 3;
}

message AuditConfig {
  repeated AuditLogConfig audit_log_configs = 1;
  repeated string exempted_members = 2;
  string service = 3;
}

message InstanceGroupManagerAutoHealingPolicy {
  string health_check = 1;
  int32 initial_delay_sec = 2;
}

message ResourcePolicyGroupPlacementPolicy {
  enum Collocation {
    COLLOCATED = 0;
    UNSPECIFIED_COLLOCATION = 1;
  }

  int32 availability_domain_count = 1;
  Collocation collocation = 2;
  int32 vm_count = 3;
}

message Network {
  string i_pv4_range = 1;
  bool auto_create_subnetworks = 2;
  string creation_timestamp = 3;
  string description = 4;
  string gateway_i_pv4 = 5;
  string id = 6;
  string kind = 7;
  string name = 8;
  repeated NetworkPeering peerings = 9;
  NetworkRoutingConfig routing_config = 10;
  string self_link = 11;
  repeated string subnetworks = 12;
}

message NetworkList {
  string id = 1;
  repeated Network items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message NodeGroupsSetNodeTemplateRequest {
  string node_template = 1;
}

message VpnGatewayStatusHighAvailabilityRequirementState {
  enum State {
    CONNECTION_REDUNDANCY_MET = 0;
    CONNECTION_REDUNDANCY_NOT_MET = 1;
  }

  enum UnsatisfiedReason {
    INCOMPLETE_TUNNELS_COVERAGE = 0;
  }

  State state = 1;
  UnsatisfiedReason unsatisfied_reason = 2;
}

message CircuitBreakers {
  int32 max_connections = 1;
  int32 max_pending_requests = 2;
  int32 max_requests = 3;
  int32 max_requests_per_connection = 4;
  int32 max_retries = 5;
}

message LicenseCodeLicenseAlias {
  string description = 1;
  string self_link = 2;
}

message LicenseCode {
  enum State {
    DISABLED = 0;
    ENABLED = 1;
    RESTRICTED = 2;
    STATE_UNSPECIFIED = 3;
    TERMINATED = 4;
  }

  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  repeated LicenseCodeLicenseAlias license_alias = 5;
  string name = 6;
  string self_link = 7;
  State state = 8;
  bool transferable = 9;
}

message License {
  bool charges_use_fee = 1;
  string creation_timestamp = 2;
  string description = 3;
  string id = 4;
  string kind = 5;
  string license_code = 6;
  string name = 7;
  LicenseResourceRequirements resource_requirements = 8;
  string self_link = 9;
  bool transferable = 10;
}

message LicensesListResponse {
  string id = 1;
  repeated License items = 2;
  string next_page_token = 3;
  string self_link = 4;
  Warning warning = 5;
}

message Router {
  RouterBgp bgp = 1;
  repeated RouterBgpPeer bgp_peers = 2;
  string creation_timestamp = 3;
  string description = 4;
  string id = 5;
  repeated RouterInterface interfaces = 6;
  string kind = 7;
  string name = 8;
  repeated RouterNat nats = 9;
  string network = 10;
  string region = 11;
  string self_link = 12;
}

message RoutersScopedList {
  repeated Router routers = 1;
  Warning warning = 2;
}

message NetworkEndpointGroupsListEndpointsRequest {
  enum HealthStatus {
    SHOW = 0;
    SKIP = 1;
  }

  HealthStatus health_status = 1;
}

message InstancesAddResourcePoliciesRequest {
  repeated string resource_policies = 1;
}

message NodeType {
  string cpu_platform = 1;
  string creation_timestamp = 2;
  DeprecationStatus deprecated = 3;
  string description = 4;
  int32 guest_cpus = 5;
  string id = 6;
  string kind = 7;
  int32 local_ssd_gb = 8;
  int32 memory_mb = 9;
  string name = 10;
  string self_link = 11;
  string zone = 12;
}

message NodeTypesScopedList {
  repeated NodeType node_types = 1;
  Warning warning = 2;
}

message DisksRemoveResourcePoliciesRequest {
  repeated string resource_policies = 1;
}

message RegionInstanceGroupManagersSetTargetPoolsRequest {
  string fingerprint = 1;
  repeated string target_pools = 2;
}

message TargetPool {
  enum SessionAffinity {
    CLIENT_IP = 0;
    CLIENT_IP_PORT_PROTO = 1;
    CLIENT_IP_PROTO = 2;
    GENERATED_COOKIE = 3;
    HEADER_FIELD = 4;
    HTTP_COOKIE = 5;
    NONE = 6;
  }

  string backup_pool = 1;
  string creation_timestamp = 2;
  string description = 3;
  float failover_ratio = 4;
  repeated string health_checks = 5;
  string id = 6;
  repeated string instances = 7;
  string kind = 8;
  string name = 9;
  string region = 10;
  string self_link = 11;
  SessionAffinity session_affinity = 12;
}

message TargetPoolList {
  string id = 1;
  repeated TargetPool items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message PacketMirroringsScopedList {
  repeated PacketMirroring packet_mirrorings = 1;
  Warning warning = 2;
}

message PacketMirroringAggregatedList {
  string id = 1;
  map<string, PacketMirroringsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InterconnectAttachmentsScopedList {
  repeated InterconnectAttachment interconnect_attachments = 1;
  Warning warning = 2;
}

message InterconnectAttachmentAggregatedList {
  string id = 1;
  map<string, InterconnectAttachmentsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message NetworkEndpoint {
  string fqdn = 1;
  string instance = 2;
  string ip_address = 3;
  int32 port = 4;
}

message NetworkEndpointGroupsDetachEndpointsRequest {
  repeated NetworkEndpoint network_endpoints = 1;
}

message NodeGroupAutoscalingPolicy {
  enum Mode {
    MODE_UNSPECIFIED = 0;
    OFF = 1;
    ON = 2;
    ONLY_SCALE_OUT = 3;
  }

  int32 max_nodes = 1;
  int32 min_nodes = 2;
  Mode mode = 3;
}

message NodeGroup {
  enum MaintenancePolicy {
    DEFAULT = 0;
    MAINTENANCE_POLICY_UNSPECIFIED = 1;
    MIGRATE_WITHIN_NODE_GROUP = 2;
    RESTART_IN_PLACE = 3;
  }

  enum Status {
    CREATING = 0;
    DELETING = 1;
    INVALID = 2;
    READY = 3;
  }

  NodeGroupAutoscalingPolicy autoscaling_policy = 1;
  string creation_timestamp = 2;
  string description = 3;
  string fingerprint = 4;
  string id = 5;
  string kind = 6;
  MaintenancePolicy maintenance_policy = 7;
  string name = 8;
  string node_template = 9;
  string self_link = 10;
  int32 size = 11;
  Status status = 12;
  string zone = 13;
}

message MetadataFilter {
  enum FilterMatchCriteria {
    MATCH_ALL = 0;
    MATCH_ANY = 1;
    NOT_SET = 2;
  }

  repeated MetadataFilterLabelMatch filter_labels = 1;
  FilterMatchCriteria filter_match_criteria = 2;
}

message ForwardingRule {
  enum IPProtocol {
    AH = 0;
    ESP = 1;
    ICMP = 2;
    SCTP = 3;
    TCP = 4;
    UDP = 5;
  }

  enum IpVersion {
    IPV4 = 0;
    IPV6 = 1;
    UNSPECIFIED_VERSION = 2;
  }

  enum LoadBalancingScheme {
    EXTERNAL = 0;
    INTERNAL = 1;
    INTERNAL_MANAGED = 2;
    INTERNAL_SELF_MANAGED = 3;
    INVALID = 4;
  }

  enum NetworkTier {
    PREMIUM = 0;
    STANDARD = 1;
  }

  string i_p_address = 1;
  IPProtocol i_p_protocol = 2;
  bool all_ports = 3;
  bool allow_global_access = 4;
  string backend_service = 5;
  string creation_timestamp = 6;
  string description = 7;
  string fingerprint = 8;
  string id = 9;
  IpVersion ip_version = 10;
  bool is_mirroring_collector = 11;
  string kind = 12;
  LoadBalancingScheme load_balancing_scheme = 13;
  repeated MetadataFilter metadata_filters = 14;
  string name = 15;
  string network = 16;
  NetworkTier network_tier = 17;
  string port_range = 18;
  repeated string ports = 19;
  string region = 20;
  string self_link = 21;
  string service_label = 22;
  string service_name = 23;
  string subnetwork = 24;
  string target = 25;
}

message InstanceProperties {
  bool can_ip_forward = 1;
  string description = 2;
  repeated AttachedDisk disks = 3;
  repeated AcceleratorConfig guest_accelerators = 4;
  map<string, string> labels = 5;
  string machine_type = 6;
  Metadata metadata = 7;
  string min_cpu_platform = 8;
  repeated NetworkInterface network_interfaces = 9;
  ReservationAffinity reservation_affinity = 10;
  repeated string resource_policies = 11;
  Scheduling scheduling = 12;
  repeated ServiceAccount service_accounts = 13;
  ShieldedInstanceConfig shielded_instance_config = 14;
  Tags tags = 15;
}

message TargetHttpProxy {
  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  string name = 5;
  string region = 6;
  string self_link = 7;
  string url_map = 8;
}

message Duration {
  int32 nanos = 1;
  string seconds = 2;
}

message BackendServiceFailoverPolicy {
  bool disable_connection_drain_on_failover = 1;
  bool drop_traffic_if_unhealthy = 2;
  float failover_ratio = 3;
}

message NetworkEndpointWithHealthStatus {
  repeated HealthStatusForNetworkEndpoint healths = 1;
  NetworkEndpoint network_endpoint = 2;
}

message NetworkEndpointGroupsListNetworkEndpoints {
  string id = 1;
  repeated NetworkEndpointWithHealthStatus items = 2;
  string kind = 3;
  string next_page_token = 4;
  Warning warning = 5;
}

message InterconnectOutageNotification {
  enum IssueType {
    IT_OUTAGE = 0;
    IT_PARTIAL_OUTAGE = 1;
    OUTAGE = 2;
    PARTIAL_OUTAGE = 3;
  }

  enum Source {
    GOOGLE = 0;
    NSRC_GOOGLE = 1;
  }

  enum State {
    ACTIVE = 0;
    CANCELLED = 1;
    COMPLETED = 2;
    NS_ACTIVE = 3;
    NS_CANCELED = 4;
  }

  repeated string affected_circuits = 1;
  string description = 2;
  string end_time = 3;
  IssueType issue_type = 4;
  string name = 5;
  Source source = 6;
  string start_time = 7;
  State state = 8;
}

message TargetHttpsProxiesSetQuicOverrideRequest {
  enum QuicOverride {
    DISABLE = 0;
    ENABLE = 1;
    NONE = 2;
  }

  QuicOverride quic_override = 1;
}

message NodeTemplateNodeTypeFlexibility {
  string cpus = 1;
  string local_ssd = 2;
  string memory = 3;
}

message ServerBinding {
  enum Type {
    RESTART_NODE_ON_ANY_SERVER = 0;
    RESTART_NODE_ON_MINIMAL_SERVERS = 1;
    SERVER_BINDING_TYPE_UNSPECIFIED = 2;
  }

  Type type = 1;
}

message RegionDisksResizeRequest {
  string size_gb = 1;
}

message HttpsHealthCheck {
  int32 check_interval_sec = 1;
  string creation_timestamp = 2;
  string description = 3;
  int32 healthy_threshold = 4;
  string host = 5;
  string id = 6;
  string kind = 7;
  string name = 8;
  int32 port = 9;
  string request_path = 10;
  string self_link = 11;
  int32 timeout_sec = 12;
  int32 unhealthy_threshold = 13;
}

message NetworkEndpointGroupsScopedList {
  repeated NetworkEndpointGroup network_endpoint_groups = 1;
  Warning warning = 2;
}

message NetworkEndpointGroupAggregatedList {
  string id = 1;
  map<string, NetworkEndpointGroupsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Reservation {
  enum Status {
    CREATING = 0;
    DELETING = 1;
    INVALID = 2;
    READY = 3;
    UPDATING = 4;
  }

  string commitment = 1;
  string creation_timestamp = 2;
  string description = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  string self_link = 7;
  AllocationSpecificSKUReservation specific_reservation = 8;
  bool specific_reservation_required = 9;
  Status status = 10;
  string zone = 11;
}

message ResourceCommitment {
  enum Type {
    ACCELERATOR = 0;
    LOCAL_SSD = 1;
    MEMORY = 2;
    UNSPECIFIED = 3;
    VCPU = 4;
  }

  string accelerator_type = 1;
  string amount = 2;
  Type type = 3;
}

message Commitment {
  enum Plan {
    INVALID = 0;
    THIRTY_SIX_MONTH = 1;
    TWELVE_MONTH = 2;
  }

  enum Status {
    ACTIVE = 0;
    CREATING = 1;
    EXPIRED = 2;
    NOT_YET_ACTIVE = 3;
  }

  string creation_timestamp = 1;
  string description = 2;
  string end_timestamp = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  Plan plan = 7;
  string region = 8;
  repeated Reservation reservations = 9;
  repeated ResourceCommitment resources = 10;
  string self_link = 11;
  string start_timestamp = 12;
  Status status = 13;
  string status_message = 14;
}

message InstancesSetMachineResourcesRequest {
  repeated AcceleratorConfig guest_accelerators = 1;
}

message NetworkPeering {
  enum State {
    ACTIVE = 0;
    INACTIVE = 1;
  }

  bool auto_create_routes = 1;
  bool exchange_subnet_routes = 2;
  bool export_custom_routes = 3;
  bool import_custom_routes = 4;
  string name = 5;
  string network = 6;
  State state = 7;
  string state_details = 8;
}

message SslCertificatesScopedList {
  repeated SslCertificate ssl_certificates = 1;
  Warning warning = 2;
}

message AuthorizationLoggingOptions {
  enum PermissionType {
    ADMIN_READ = 0;
    ADMIN_WRITE = 1;
    DATA_READ = 2;
    DATA_WRITE = 3;
    PERMISSION_TYPE_UNSPECIFIED = 4;
  }

  PermissionType permission_type = 1;
}

message InterconnectAttachmentPartnerMetadata {
  string interconnect_name = 1;
  string partner_name = 2;
  string portal_url = 3;
}

message ResourcePolicyWeeklyCycleDayOfWeek {
  enum Day {
    FRIDAY = 0;
    INVALID = 1;
    MONDAY = 2;
    SATURDAY = 3;
    SUNDAY = 4;
    THURSDAY = 5;
    TUESDAY = 6;
    WEDNESDAY = 7;
  }

  Day day = 1;
  string duration = 2;
  string start_time = 3;
}

message TargetInstance {
  enum NatPolicy {
    NO_NAT = 0;
  }

  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string instance = 4;
  string kind = 5;
  string name = 6;
  NatPolicy nat_policy = 7;
  string self_link = 8;
  string zone = 9;
}

message TargetInstancesScopedList {
  repeated TargetInstance target_instances = 1;
  Warning warning = 2;
}

message InstanceGroupManagersRecreateInstancesRequest {
  repeated string instances = 1;
}

message AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk {
  enum Interface {
    NVME = 0;
    SCSI = 1;
  }

  string disk_size_gb = 1;
  Interface interface = 2;
}

message VmEndpointNatMappingsInterfaceNatMappings {
  repeated string drain_nat_ip_port_ranges = 1;
  repeated string nat_ip_port_ranges = 2;
  int32 num_total_drain_nat_ports = 3;
  int32 num_total_nat_ports = 4;
  string source_alias_ip_range = 5;
  string source_virtual_ip = 6;
}

message Binding {
  Expr condition = 1;
  repeated string members = 2;
  string role = 3;
}

message Policy {
  repeated AuditConfig audit_configs = 1;
  repeated Binding bindings = 2;
  string etag = 3;
  bool iam_owned = 4;
  repeated Rule rules = 5;
  int32 version = 6;
}

message GlobalSetPolicyRequest {
  repeated Binding bindings = 1;
  string etag = 2;
  Policy policy = 3;
}

message DiskType {
  string creation_timestamp = 1;
  string default_disk_size_gb = 2;
  DeprecationStatus deprecated = 3;
  string description = 4;
  string id = 5;
  string kind = 6;
  string name = 7;
  string region = 8;
  string self_link = 9;
  string valid_disk_size = 10;
  string zone = 11;
}

message TestPermissionsResponse {
  repeated string permissions = 1;
}

message TargetInstanceAggregatedList {
  string id = 1;
  map<string, TargetInstancesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceWithNamedPorts {
  enum Status {
    DEPROVISIONING = 0;
    PROVISIONING = 1;
    REPAIRING = 2;
    RUNNING = 3;
    STAGING = 4;
    STOPPED = 5;
    STOPPING = 6;
    SUSPENDED = 7;
    SUSPENDING = 8;
    TERMINATED = 9;
  }

  string instance = 1;
  repeated NamedPort named_ports = 2;
  Status status = 3;
}

message RegionInstanceGroupsListInstances {
  string id = 1;
  repeated InstanceWithNamedPorts items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message SubnetworkSecondaryRange {
  string ip_cidr_range = 1;
  string range_name = 2;
}

message HealthCheckReference {
  string health_check = 1;
}

message TargetPoolsAddHealthCheckRequest {
  repeated HealthCheckReference health_checks = 1;
}

message HttpHeaderMatch {
  string exact_match = 1;
  string header_name = 2;
  bool invert_match = 3;
  string prefix_match = 4;
  bool present_match = 5;
  Int64RangeMatch range_match = 6;
  string regex_match = 7;
  string suffix_match = 8;
}

message HttpQueryParameterMatch {
  string exact_match = 1;
  string name = 2;
  bool present_match = 3;
  string regex_match = 4;
}

message HttpRouteRuleMatch {
  string full_path_match = 1;
  repeated HttpHeaderMatch header_matches = 2;
  bool ignore_case = 3;
  repeated MetadataFilter metadata_filters = 4;
  string prefix_match = 5;
  repeated HttpQueryParameterMatch query_parameter_matches = 6;
  string regex_match = 7;
}

message AllocationSpecificSKUAllocationReservedInstanceProperties {
  repeated AcceleratorConfig guest_accelerators = 1;
  repeated AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk local_ssds = 2;
  string machine_type = 3;
  string min_cpu_platform = 4;
}

message AllocationSpecificSKUReservation {
  string count = 1;
  string in_use_count = 2;
  AllocationSpecificSKUAllocationReservedInstanceProperties instance_properties = 3;
}

message Condition {
  string iam = 1;
  string op = 2;
  string svc = 3;
  string sys = 4;
  repeated string values = 5;
}

message CacheKeyPolicy {
  bool include_host = 1;
  bool include_protocol = 2;
  bool include_query_string = 3;
  repeated string query_string_blacklist = 4;
  repeated string query_string_whitelist = 5;
}

message ForwardingRulesScopedList {
  repeated ForwardingRule forwarding_rules = 1;
  Warning warning = 2;
}

message ForwardingRuleAggregatedList {
  string id = 1;
  map<string, ForwardingRulesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RouterStatusNatStatus {
  repeated string auto_allocated_nat_ips = 1;
  repeated string drain_auto_allocated_nat_ips = 2;
  repeated string drain_user_allocated_nat_ips = 3;
  int32 min_extra_nat_ips_needed = 4;
  string name = 5;
  int32 num_vm_endpoints_with_nat_mappings = 6;
  repeated string user_allocated_nat_ip_resources = 7;
  repeated string user_allocated_nat_ips = 8;
}

message BackendServiceGroupHealth {
  repeated HealthStatus health_status = 1;
  string kind = 2;
}

message Subnetwork {
  enum Purpose {
    INTERNAL_HTTPS_LOAD_BALANCER = 0;
    PRIVATE = 1;
    PRIVATE_RFC_1918 = 2;
  }

  enum Role {
    ACTIVE = 0;
    BACKUP = 1;
  }

  enum State {
    DRAINING = 0;
    READY = 1;
  }

  string creation_timestamp = 1;
  string description = 2;
  bool enable_flow_logs = 3;
  string fingerprint = 4;
  string gateway_address = 5;
  string id = 6;
  string ip_cidr_range = 7;
  string kind = 8;
  SubnetworkLogConfig log_config = 9;
  string name = 10;
  string network = 11;
  bool private_ip_google_access = 12;
  Purpose purpose = 13;
  string region = 14;
  Role role = 15;
  repeated SubnetworkSecondaryRange secondary_ip_ranges = 16;
  string self_link = 17;
  State state = 18;
}

message SubnetworksScopedList {
  repeated Subnetwork subnetworks = 1;
  Warning warning = 2;
}

message XpnResourceId {
  enum Type {
    PROJECT = 0;
    XPN_RESOURCE_TYPE_UNSPECIFIED = 1;
  }

  string id = 1;
  Type type = 2;
}

message ProjectsEnableXpnResourceRequest {
  XpnResourceId xpn_resource = 1;
}

message RegionDiskTypeList {
  string id = 1;
  repeated DiskType items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message HealthChecksScopedList {
  repeated HealthCheck health_checks = 1;
  Warning warning = 2;
}

message NetworkEndpointGroupsAttachEndpointsRequest {
  repeated NetworkEndpoint network_endpoints = 1;
}

message TargetSslProxiesSetBackendServiceRequest {
  string service = 1;
}

message Zone {
  enum Status {
    DOWN = 0;
    UP = 1;
  }

  repeated string available_cpu_platforms = 1;
  string creation_timestamp = 2;
  DeprecationStatus deprecated = 3;
  string description = 4;
  string id = 5;
  string kind = 6;
  string name = 7;
  string region = 8;
  string self_link = 9;
  Status status = 10;
}

message ZoneList {
  string id = 1;
  repeated Zone items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceTemplate {
  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  string name = 5;
  InstanceProperties properties = 6;
  string self_link = 7;
  string source_instance = 8;
  SourceInstanceParams source_instance_params = 9;
}

message InstanceTemplateList {
  string id = 1;
  repeated InstanceTemplate items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message LicenseResourceRequirements {
  int32 min_guest_cpu_count = 1;
  int32 min_memory_mb = 2;
}

message NodeGroupsAddNodesRequest {
  int32 additional_node_count = 1;
}

message TargetVpnGateway {
  enum Status {
    CREATING = 0;
    DELETING = 1;
    FAILED = 2;
    READY = 3;
  }

  string creation_timestamp = 1;
  string description = 2;
  repeated string forwarding_rules = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  string network = 7;
  string region = 8;
  string self_link = 9;
  Status status = 10;
  repeated string tunnels = 11;
}

message TargetVpnGatewayList {
  string id = 1;
  repeated TargetVpnGateway items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Backend {
  enum BalancingMode {
    CONNECTION = 0;
    RATE = 1;
    UTILIZATION = 2;
  }

  BalancingMode balancing_mode = 1;
  float capacity_scaler = 2;
  string description = 3;
  bool failover = 4;
  string group = 5;
  int32 max_connections = 6;
  int32 max_connections_per_endpoint = 7;
  int32 max_connections_per_instance = 8;
  int32 max_rate = 9;
  float max_rate_per_endpoint = 10;
  float max_rate_per_instance = 11;
  float max_utilization = 12;
}

message InstanceReference {
  string instance = 1;
}

message NodeGroupList {
  string id = 1;
  repeated NodeGroup items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceGroupsRemoveInstancesRequest {
  repeated InstanceReference instances = 1;
}

message ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
  enum OnSourceDiskDelete {
    APPLY_RETENTION_POLICY = 0;
    KEEP_AUTO_SNAPSHOTS = 1;
    UNSPECIFIED_ON_SOURCE_DISK_DELETE = 2;
  }

  int32 max_retention_days = 1;
  OnSourceDiskDelete on_source_disk_delete = 2;
}

message ResourcePolicySnapshotSchedulePolicySchedule {
  ResourcePolicyDailyCycle daily_schedule = 1;
  ResourcePolicyHourlyCycle hourly_schedule = 2;
  ResourcePolicyWeeklyCycle weekly_schedule = 3;
}

message ResourcePolicySnapshotSchedulePolicy {
  ResourcePolicySnapshotSchedulePolicyRetentionPolicy retention_policy = 1;
  ResourcePolicySnapshotSchedulePolicySchedule schedule = 2;
  ResourcePolicySnapshotSchedulePolicySnapshotProperties snapshot_properties = 3;
}

message Disk {
  enum Status {
    CREATING = 0;
    DELETING = 1;
    FAILED = 2;
    READY = 3;
    RESTORING = 4;
  }

  string creation_timestamp = 1;
  string description = 2;
  CustomerEncryptionKey disk_encryption_key = 3;
  repeated GuestOsFeature guest_os_features = 4;
  string id = 5;
  string kind = 6;
  string label_fingerprint = 7;
  map<string, string> labels = 8;
  string last_attach_timestamp = 9;
  string last_detach_timestamp = 10;
  repeated string license_codes = 11;
  repeated string licenses = 12;
  string name = 13;
  string options = 14;
  string physical_block_size_bytes = 15;
  string region = 16;
  repeated string replica_zones = 17;
  repeated string resource_policies = 18;
  string self_link = 19;
  string size_gb = 20;
  string source_image = 21;
  CustomerEncryptionKey source_image_encryption_key = 22;
  string source_image_id = 23;
  string source_snapshot = 24;
  CustomerEncryptionKey source_snapshot_encryption_key = 25;
  string source_snapshot_id = 26;
  Status status = 27;
  string type = 28;
  repeated string users = 29;
  string zone = 30;
}

message DisksScopedList {
  repeated Disk disks = 1;
  Warning warning = 2;
}

message MachineType {
  string creation_timestamp = 1;
  DeprecationStatus deprecated = 2;
  string description = 3;
  int32 guest_cpus = 4;
  string id = 5;
  int32 image_space_gb = 6;
  bool is_shared_cpu = 7;
  string kind = 8;
  int32 maximum_persistent_disks = 9;
  string maximum_persistent_disks_size_gb = 10;
  int32 memory_mb = 11;
  string name = 12;
  repeated ScratchDisks scratch_disks = 13;
  string self_link = 14;
  string zone = 15;
}

message MachineTypeList {
  string id = 1;
  repeated MachineType items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message SslPolicy {
  enum MinTlsVersion {
    TLS_1_0 = 0;
    TLS_1_1 = 1;
    TLS_1_2 = 2;
  }

  enum Profile {
    COMPATIBLE = 0;
    CUSTOM = 1;
    MODERN = 2;
    RESTRICTED = 3;
  }

  string creation_timestamp = 1;
  repeated string custom_features = 2;
  string description = 3;
  repeated string enabled_features = 4;
  string fingerprint = 5;
  string id = 6;
  string kind = 7;
  MinTlsVersion min_tls_version = 8;
  string name = 9;
  Profile profile = 10;
  string self_link = 11;
  repeated Warnings warnings = 12;
}

message SslPoliciesList {
  string id = 1;
  repeated SslPolicy items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ProjectsListXpnHostsRequest {
  string organization = 1;
}

message Address {
  enum AddressType {
    EXTERNAL = 0;
    INTERNAL = 1;
    UNSPECIFIED_TYPE = 2;
  }

  enum IpVersion {
    IPV4 = 0;
    IPV6 = 1;
    UNSPECIFIED_VERSION = 2;
  }

  enum NetworkTier {
    PREMIUM = 0;
    STANDARD = 1;
  }

  enum Purpose {
    DNS_RESOLVER = 0;
    GCE_ENDPOINT = 1;
    NAT_AUTO = 2;
    VPC_PEERING = 3;
  }

  enum Status {
    IN_USE = 0;
    RESERVED = 1;
    RESERVING = 2;
  }

  string address = 1;
  AddressType address_type = 2;
  string creation_timestamp = 3;
  string description = 4;
  string id = 5;
  IpVersion ip_version = 6;
  string kind = 7;
  string name = 8;
  string network = 9;
  NetworkTier network_tier = 10;
  int32 prefix_length = 11;
  Purpose purpose = 12;
  string region = 13;
  string self_link = 14;
  Status status = 15;
  string subnetwork = 16;
  repeated string users = 17;
}

message RegionInstanceGroupManagersApplyUpdatesRequest {
  repeated string instances = 1;
  string minimal_action = 2;
  string most_disruptive_allowed_action = 3;
}

message SubnetworksExpandIpCidrRangeRequest {
  string ip_cidr_range = 1;
}

message TargetSslProxiesSetProxyHeaderRequest {
  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  ProxyHeader proxy_header = 1;
}

message NetworksAddPeeringRequest {
  bool auto_create_routes = 1;
  string name = 2;
  NetworkPeering network_peering = 3;
  string peer_network = 4;
}

message CorsPolicy {
  bool allow_credentials = 1;
  repeated string allow_headers = 2;
  repeated string allow_methods = 3;
  repeated string allow_origin_regexes = 4;
  repeated string allow_origins = 5;
  bool disabled = 6;
  repeated string expose_headers = 7;
  int32 max_age = 8;
}

message RequestMirrorPolicy {
  string backend_service = 1;
}

message HttpRetryPolicy {
  uint32 num_retries = 1;
  Duration per_try_timeout = 2;
  repeated string retry_conditions = 3;
}

message UrlRewrite {
  string host_rewrite = 1;
  string path_prefix_rewrite = 2;
}

message WeightedBackendService {
  string backend_service = 1;
  HttpHeaderAction header_action = 2;
  uint32 weight = 3;
}

message HttpRouteAction {
  CorsPolicy cors_policy = 1;
  HttpFaultInjection fault_injection_policy = 2;
  RequestMirrorPolicy request_mirror_policy = 3;
  HttpRetryPolicy retry_policy = 4;
  Duration timeout = 5;
  UrlRewrite url_rewrite = 6;
  repeated WeightedBackendService weighted_backend_services = 7;
}

message HostRule {
  string description = 1;
  repeated string hosts = 2;
  string path_matcher = 3;
}

message DeprecationStatus {
  enum State {
    ACTIVE = 0;
    DELETED = 1;
    DEPRECATED = 2;
    OBSOLETE = 3;
  }

  string deleted = 1;
  string deprecated = 2;
  string obsolete = 3;
  string replacement = 4;
  State state = 5;
}

message GuestOsFeature {
  enum Type {
    FEATURE_TYPE_UNSPECIFIED = 0;
    MULTI_IP_SUBNET = 1;
    SECURE_BOOT = 2;
    UEFI_COMPATIBLE = 3;
    VIRTIO_SCSI_MULTIQUEUE = 4;
    WINDOWS = 5;
  }

  Type type = 1;
}

message CustomerEncryptionKey {
  string kms_key_name = 1;
  string kms_key_service_account = 2;
  string raw_key = 3;
  string sha256 = 4;
}

message RawDisk {
  enum ContainerType {
    TAR = 0;
  }

  ContainerType container_type = 1;
  string sha1_checksum = 2;
  string source = 3;
}

message InitialStateConfig {
  repeated FileContentBuffer dbs = 1;
  repeated FileContentBuffer dbxs = 2;
  repeated FileContentBuffer keks = 3;
  FileContentBuffer pk = 4;
}

message Image {
  enum SourceType {
    RAW = 0;
  }

  enum Status {
    DELETING = 0;
    FAILED = 1;
    PENDING = 2;
    READY = 3;
  }

  string archive_size_bytes = 1;
  string creation_timestamp = 2;
  DeprecationStatus deprecated = 3;
  string description = 4;
  string disk_size_gb = 5;
  string family = 6;
  repeated GuestOsFeature guest_os_features = 7;
  string id = 8;
  CustomerEncryptionKey image_encryption_key = 9;
  string kind = 10;
  string label_fingerprint = 11;
  map<string, string> labels = 12;
  repeated string license_codes = 13;
  repeated string licenses = 14;
  string name = 15;
  RawDisk raw_disk = 16;
  string self_link = 17;
  InitialStateConfig shielded_instance_initial_state = 18;
  string source_disk = 19;
  CustomerEncryptionKey source_disk_encryption_key = 20;
  string source_disk_id = 21;
  string source_image = 22;
  CustomerEncryptionKey source_image_encryption_key = 23;
  string source_image_id = 24;
  string source_snapshot = 25;
  CustomerEncryptionKey source_snapshot_encryption_key = 26;
  string source_snapshot_id = 27;
  SourceType source_type = 28;
  Status status = 29;
  repeated string storage_locations = 30;
}

message MachineTypesScopedList {
  repeated MachineType machine_types = 1;
  Warning warning = 2;
}

message MachineTypeAggregatedList {
  string id = 1;
  map<string, MachineTypesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message PacketMirroringFilter {
  repeated string i_p_protocols = 1;
  repeated string cidr_ranges = 2;
}

message ExchangedPeeringRoute {
  enum Type {
    DYNAMIC_PEERING_ROUTE = 0;
    STATIC_PEERING_ROUTE = 1;
    SUBNET_PEERING_ROUTE = 2;
  }

  string dest_range = 1;
  bool imported = 2;
  string next_hop_region = 3;
  uint32 priority = 4;
  Type type = 5;
}

message ExchangedPeeringRoutesList {
  string id = 1;
  repeated ExchangedPeeringRoute items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message NamedPort {
  string name = 1;
  int32 port = 2;
}

message DiskInstantiationConfig {
  enum InstantiateFrom {
    ATTACH_READ_ONLY = 0;
    BLANK = 1;
    CUSTOM_IMAGE = 2;
    DEFAULT = 3;
    DO_NOT_INCLUDE = 4;
    SOURCE_IMAGE = 5;
    SOURCE_IMAGE_FAMILY = 6;
  }

  bool auto_delete = 1;
  string custom_image = 2;
  string device_name = 3;
  InstantiateFrom instantiate_from = 4;
}

message InstanceGroupManagerActionsSummary {
  int32 abandoning = 1;
  int32 creating = 2;
  int32 creating_without_retries = 3;
  int32 deleting = 4;
  int32 none = 5;
  int32 recreating = 6;
  int32 refreshing = 7;
  int32 restarting = 8;
  int32 verifying = 9;
}

message DistributionPolicy {
  repeated DistributionPolicyZoneConfiguration zones = 1;
}

message InstanceGroupManagerStatus {
  string autoscaler = 1;
  bool is_stable = 2;
  InstanceGroupManagerStatusVersionTarget version_target = 3;
}

message InstanceGroupManagerVersion {
  string instance_template = 1;
  string name = 2;
  FixedOrPercent target_size = 3;
}

message SubnetworkLogConfig {
  enum AggregationInterval {
    INTERVAL_10_MIN = 0;
    INTERVAL_15_MIN = 1;
    INTERVAL_1_MIN = 2;
    INTERVAL_30_SEC = 3;
    INTERVAL_5_MIN = 4;
    INTERVAL_5_SEC = 5;
  }

  enum Metadata {
    CUSTOM_METADATA = 0;
    EXCLUDE_ALL_METADATA = 1;
    INCLUDE_ALL_METADATA = 2;
  }

  AggregationInterval aggregation_interval = 1;
  bool enable = 2;
  string filter_expr = 3;
  float flow_sampling = 4;
  Metadata metadata = 5;
  repeated string metadata_fields = 6;
}

message UrlMap {
  string creation_timestamp = 1;
  HttpRouteAction default_route_action = 2;
  string default_service = 3;
  HttpRedirectAction default_url_redirect = 4;
  string description = 5;
  string fingerprint = 6;
  HttpHeaderAction header_action = 7;
  repeated HostRule host_rules = 8;
  string id = 9;
  string kind = 10;
  string name = 11;
  repeated PathMatcher path_matchers = 12;
  string region = 13;
  string self_link = 14;
  repeated UrlMapTest tests = 15;
}

message UrlMapList {
  string id = 1;
  repeated UrlMap items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ZoneSetLabelsRequest {
  string label_fingerprint = 1;
  map<string, string> labels = 2;
}

message RouterBgp {
  enum AdvertiseMode {
    CUSTOM = 0;
    DEFAULT = 1;
  }

  enum AdvertisedGroups {
    ALL_SUBNETS = 0;
  }

  AdvertiseMode advertise_mode = 1;
  repeated AdvertisedGroups advertised_groups = 2;
  repeated RouterAdvertisedIpRange advertised_ip_ranges = 3;
  uint32 asn = 4;
}

message RouterBgpPeer {
  enum AdvertiseMode {
    CUSTOM = 0;
    DEFAULT = 1;
  }

  enum AdvertisedGroups {
    ALL_SUBNETS = 0;
  }

  enum ManagementType {
    MANAGED_BY_ATTACHMENT = 0;
    MANAGED_BY_USER = 1;
  }

  AdvertiseMode advertise_mode = 1;
  repeated AdvertisedGroups advertised_groups = 2;
  repeated RouterAdvertisedIpRange advertised_ip_ranges = 3;
  uint32 advertised_route_priority = 4;
  string interface_name = 5;
  string ip_address = 6;
  ManagementType management_type = 7;
  string name = 8;
  uint32 peer_asn = 9;
  string peer_ip_address = 10;
}

message RouterInterface {
  enum ManagementType {
    MANAGED_BY_ATTACHMENT = 0;
    MANAGED_BY_USER = 1;
  }

  string ip_range = 1;
  string linked_interconnect_attachment = 2;
  string linked_vpn_tunnel = 3;
  ManagementType management_type = 4;
  string name = 5;
}

message RouterNat {
  enum NatIpAllocateOption {
    AUTO_ONLY = 0;
    MANUAL_ONLY = 1;
  }

  enum SourceSubnetworkIpRangesToNat {
    ALL_SUBNETWORKS_ALL_IP_RANGES = 0;
    ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES = 1;
    LIST_OF_SUBNETWORKS = 2;
  }

  repeated string drain_nat_ips = 1;
  int32 icmp_idle_timeout_sec = 2;
  RouterNatLogConfig log_config = 3;
  int32 min_ports_per_vm = 4;
  string name = 5;
  NatIpAllocateOption nat_ip_allocate_option = 6;
  repeated string nat_ips = 7;
  SourceSubnetworkIpRangesToNat source_subnetwork_ip_ranges_to_nat = 8;
  repeated RouterNatSubnetworkToNat subnetworks = 9;
  int32 tcp_established_idle_timeout_sec = 10;
  int32 tcp_transitory_idle_timeout_sec = 11;
  int32 udp_idle_timeout_sec = 12;
}

message UrlMapsScopedList {
  repeated UrlMap url_maps = 1;
  Warning warning = 2;
}

message FileContentBuffer {
  enum FileType {
    BIN = 0;
    UNDEFINED = 1;
    X509 = 2;
  }

  string content = 1;
  FileType file_type = 2;
}

message VpnGatewaysScopedList {
  repeated VpnGateway vpn_gateways = 1;
  Warning warning = 2;
}

message VpnGatewayAggregatedList {
  string id = 1;
  map<string, VpnGatewaysScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InterconnectDiagnosticsLinkLACPStatus {
  enum State {
    ACTIVE = 0;
    DETACHED = 1;
  }

  string google_system_id = 1;
  string neighbor_system_id = 2;
  State state = 3;
}

message InstanceGroup {
  string creation_timestamp = 1;
  string description = 2;
  string fingerprint = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  repeated NamedPort named_ports = 7;
  string network = 8;
  string region = 9;
  string self_link = 10;
  int32 size = 11;
  string subnetwork = 12;
  string zone = 13;
}

message GlobalNetworkEndpointGroupsDetachEndpointsRequest {
  repeated NetworkEndpoint network_endpoints = 1;
}

message Snapshot {
  enum Status {
    CREATING = 0;
    DELETING = 1;
    FAILED = 2;
    READY = 3;
    UPLOADING = 4;
  }

  enum StorageBytesStatus {
    UPDATING = 0;
    UP_TO_DATE = 1;
  }

  bool auto_created = 1;
  string creation_timestamp = 2;
  string description = 3;
  string disk_size_gb = 4;
  string download_bytes = 5;
  string id = 6;
  string kind = 7;
  string label_fingerprint = 8;
  map<string, string> labels = 9;
  repeated string license_codes = 10;
  repeated string licenses = 11;
  string name = 12;
  string self_link = 13;
  CustomerEncryptionKey snapshot_encryption_key = 14;
  string source_disk = 15;
  CustomerEncryptionKey source_disk_encryption_key = 16;
  string source_disk_id = 17;
  Status status = 18;
  string storage_bytes = 19;
  StorageBytesStatus storage_bytes_status = 20;
  repeated string storage_locations = 21;
}

message UrlMapsAggregatedList {
  string id = 1;
  map<string, UrlMapsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Int64RangeMatch {
  string range_end = 1;
  string range_start = 2;
}

message ShieldedInstanceIdentityEntry {
  string ek_cert = 1;
  string ek_pub = 2;
}

message ExternalVpnGatewayInterface {
  uint32 id = 1;
  string ip_address = 2;
}

message ExternalVpnGateway {
  enum RedundancyType {
    FOUR_IPS_REDUNDANCY = 0;
    SINGLE_IP_INTERNALLY_REDUNDANT = 1;
    TWO_IPS_REDUNDANCY = 2;
  }

  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  repeated ExternalVpnGatewayInterface interfaces = 4;
  string kind = 5;
  string label_fingerprint = 6;
  map<string, string> labels = 7;
  string name = 8;
  RedundancyType redundancy_type = 9;
  string self_link = 10;
}

message SourceInstanceParams {
  repeated DiskInstantiationConfig disk_configs = 1;
}

message HttpHealthCheck {
  int32 check_interval_sec = 1;
  string creation_timestamp = 2;
  string description = 3;
  int32 healthy_threshold = 4;
  string host = 5;
  string id = 6;
  string kind = 7;
  string name = 8;
  int32 port = 9;
  string request_path = 10;
  string self_link = 11;
  int32 timeout_sec = 12;
  int32 unhealthy_threshold = 13;
}

message HttpHealthCheckList {
  string id = 1;
  repeated HttpHealthCheck items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ResourcePoliciesScopedList {
  repeated ResourcePolicy resource_policies = 1;
  Warning warning = 2;
}

message ResourcePolicyAggregatedList {
  string etag = 1;
  string id = 2;
  map<string, ResourcePoliciesScopedList> items = 3;
  string kind = 4;
  string next_page_token = 5;
  string self_link = 6;
  Warning warning = 7;
}

message AutoscalingPolicyCpuUtilization {
  double utilization_target = 1;
}

message UrlMapTest {
  string description = 1;
  string host = 2;
  string path = 3;
  string service = 4;
}

message HttpRedirectAction {
  enum RedirectResponseCode {
    FOUND = 0;
    MOVED_PERMANENTLY_DEFAULT = 1;
    PERMANENT_REDIRECT = 2;
    SEE_OTHER = 3;
    TEMPORARY_REDIRECT = 4;
  }

  string host_redirect = 1;
  bool https_redirect = 2;
  string path_redirect = 3;
  string prefix_redirect = 4;
  RedirectResponseCode redirect_response_code = 5;
  bool strip_query = 6;
}

message SecurityPolicyReference {
  string security_policy = 1;
}

message UrlMapReference {
  string url_map = 1;
}

message InterconnectLocation {
  enum Continent {
    AFRICA = 0;
    ASIA_PAC = 1;
    C_AFRICA = 2;
    C_ASIA_PAC = 3;
    C_EUROPE = 4;
    C_NORTH_AMERICA = 5;
    C_SOUTH_AMERICA = 6;
    EUROPE = 7;
    NORTH_AMERICA = 8;
    SOUTH_AMERICA = 9;
  }

  enum Status {
    AVAILABLE = 0;
    CLOSED = 1;
  }

  string address = 1;
  string availability_zone = 2;
  string city = 3;
  Continent continent = 4;
  string creation_timestamp = 5;
  string description = 6;
  string facility_provider = 7;
  string facility_provider_facility_id = 8;
  string id = 9;
  string kind = 10;
  string name = 11;
  string peeringdb_facility_id = 12;
  repeated InterconnectLocationRegionInfo region_infos = 13;
  string self_link = 14;
  Status status = 15;
}

message InterconnectLocationList {
  string id = 1;
  repeated InterconnectLocation items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ConsistentHashLoadBalancerSettingsHttpCookie {
  string name = 1;
  string path = 2;
  Duration ttl = 3;
}

message InterconnectCircuitInfo {
  string customer_demarc_id = 1;
  string google_circuit_id = 2;
  string google_demarc_id = 3;
}

message BackendBucket {
  string bucket_name = 1;
  BackendBucketCdnPolicy cdn_policy = 2;
  string creation_timestamp = 3;
  string description = 4;
  bool enable_cdn = 5;
  string id = 6;
  string kind = 7;
  string name = 8;
  string self_link = 9;
}

message BackendBucketList {
  string id = 1;
  repeated BackendBucket items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetHttpsProxyAggregatedList {
  string id = 1;
  map<string, TargetHttpsProxiesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message DiskMoveRequest {
  string destination_zone = 1;
  string target_disk = 2;
}

message ResourcePolicy {
  enum Status {
    CREATING = 0;
    DELETING = 1;
    INVALID = 2;
    READY = 3;
  }

  string creation_timestamp = 1;
  string description = 2;
  ResourcePolicyGroupPlacementPolicy group_placement_policy = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  string region = 7;
  string self_link = 8;
  ResourcePolicySnapshotSchedulePolicy snapshot_schedule_policy = 9;
  Status status = 10;
}

message ResourcePolicyList {
  string etag = 1;
  string id = 2;
  repeated ResourcePolicy items = 3;
  string kind = 4;
  string next_page_token = 5;
  string self_link = 6;
  Warning warning = 7;
}

message BackendServiceCdnPolicy {
  CacheKeyPolicy cache_key_policy = 1;
  string signed_url_cache_max_age_sec = 2;
  repeated string signed_url_key_names = 3;
}

message InstanceGroupsScopedList {
  repeated InstanceGroup instance_groups = 1;
  Warning warning = 2;
}

message TargetVpnGatewaysScopedList {
  repeated TargetVpnGateway target_vpn_gateways = 1;
  Warning warning = 2;
}

message InstanceGroupManagersAbandonInstancesRequest {
  repeated string instances = 1;
}

message ReservationsScopedList {
  repeated Reservation reservations = 1;
  Warning warning = 2;
}

message SubnetworksSetPrivateIpGoogleAccessRequest {
  bool private_ip_google_access = 1;
}

message InstancesSetMinCpuPlatformRequest {
  string min_cpu_platform = 1;
}

message PacketMirroringForwardingRuleInfo {
  string canonical_url = 1;
  string url = 2;
}

message CommitmentList {
  string id = 1;
  repeated Commitment items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RouterNatLogConfig {
  enum Filter {
    ALL = 0;
    ERRORS_ONLY = 1;
    TRANSLATIONS_ONLY = 2;
  }

  bool enable = 1;
  Filter filter = 2;
}

message RouterNatSubnetworkToNat {
  enum SourceIpRangesToNat {
    ALL_IP_RANGES = 0;
    LIST_OF_SECONDARY_IP_RANGES = 1;
    PRIMARY_IP_RANGE = 2;
  }

  string name = 1;
  repeated string secondary_ip_range_names = 2;
  repeated SourceIpRangesToNat source_ip_ranges_to_nat = 3;
}

message TargetVpnGatewayAggregatedList {
  string id = 1;
  map<string, TargetVpnGatewaysScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message UsableSubnetwork {
  string ip_cidr_range = 1;
  string network = 2;
  repeated UsableSubnetworkSecondaryRange secondary_ip_ranges = 3;
  string subnetwork = 4;
}

message UsableSubnetworksAggregatedList {
  string id = 1;
  repeated UsableSubnetwork items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Route {
  string creation_timestamp = 1;
  string description = 2;
  string dest_range = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  string network = 7;
  string next_hop_gateway = 8;
  string next_hop_ilb = 9;
  string next_hop_instance = 10;
  string next_hop_ip = 11;
  string next_hop_network = 12;
  string next_hop_peering = 13;
  string next_hop_vpn_tunnel = 14;
  uint32 priority = 15;
  string self_link = 16;
  repeated string tags = 17;
  repeated Warnings warnings = 18;
}

message RouterStatusBgpPeerStatus {
  enum Status {
    DOWN = 0;
    UNKNOWN = 1;
    UP = 2;
  }

  repeated Route advertised_routes = 1;
  string ip_address = 2;
  string linked_vpn_tunnel = 3;
  string name = 4;
  uint32 num_learned_routes = 5;
  string peer_ip_address = 6;
  string state = 7;
  Status status = 8;
  string uptime = 9;
  string uptime_seconds = 10;
}

message RouterStatus {
  repeated Route best_routes = 1;
  repeated Route best_routes_for_router = 2;
  repeated RouterStatusBgpPeerStatus bgp_peer_status = 3;
  repeated RouterStatusNatStatus nat_status = 4;
  string network = 5;
}

message RegionTargetHttpsProxiesSetSslCertificatesRequest {
  repeated string ssl_certificates = 1;
}

message PacketMirroringMirroredResourceInfoInstanceInfo {
  string canonical_url = 1;
  string url = 2;
}

message PacketMirroringMirroredResourceInfoSubnetInfo {
  string canonical_url = 1;
  string url = 2;
}

message PacketMirroringMirroredResourceInfo {
  repeated PacketMirroringMirroredResourceInfoInstanceInfo instances = 1;
  repeated PacketMirroringMirroredResourceInfoSubnetInfo subnetworks = 2;
  repeated string tags = 3;
}

message InterconnectAttachmentPrivateInfo {
  uint32 tag8021q = 1;
}

message PathRule {
  repeated string paths = 1;
  HttpRouteAction route_action = 2;
  string service = 3;
  HttpRedirectAction url_redirect = 4;
}

message TargetPoolsScopedList {
  repeated TargetPool target_pools = 1;
  Warning warning = 2;
}

message TargetPoolAggregatedList {
  string id = 1;
  map<string, TargetPoolsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message SecurityPolicy {
  string creation_timestamp = 1;
  string description = 2;
  string fingerprint = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  repeated SecurityPolicyRule rules = 7;
  string self_link = 8;
}

message SecurityPolicyList {
  string id = 1;
  repeated SecurityPolicy items = 2;
  string kind = 3;
  string next_page_token = 4;
  Warning warning = 5;
}

message VmEndpointNatMappings {
  string instance_name = 1;
  repeated VmEndpointNatMappingsInterfaceNatMappings interface_nat_mappings = 2;
}

message RouterList {
  string id = 1;
  repeated Router items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message AddressesScopedList {
  repeated Address addresses = 1;
  Warning warning = 2;
}

message AddressAggregatedList {
  string id = 1;
  map<string, AddressesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RouterAdvertisedIpRange {
  string description = 1;
  string range = 2;
}

message InstancesScopedList {
  repeated Instance instances = 1;
  Warning warning = 2;
}

message InstanceAggregatedList {
  string id = 1;
  map<string, InstancesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RegionInstanceGroupManagersListErrorsResponse {
  repeated InstanceManagedByIgmError items = 1;
  string next_page_token = 2;
}

message InstanceGroupManagersApplyUpdatesRequest {
  repeated string instances = 1;
  string minimal_action = 2;
  string most_disruptive_allowed_action = 3;
}

message BackendServiceReference {
  string backend_service = 1;
}

message InterconnectDiagnosticsLinkOpticalPower {
  enum State {
    HIGH_ALARM = 0;
    HIGH_WARNING = 1;
    LOW_ALARM = 2;
    LOW_WARNING = 3;
    OK = 4;
  }

  State state = 1;
  float value = 2;
}

message NodeTypeList {
  string id = 1;
  repeated NodeType items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message VpnGatewayVpnGatewayInterface {
  uint32 id = 1;
  string ip_address = 2;
}

message RegionInstanceGroupManagersSetTemplateRequest {
  string instance_template = 1;
}

message InstancesSetServiceAccountRequest {
  string email = 1;
  repeated string scopes = 2;
}

message TestPermissionsRequest {
  repeated string permissions = 1;
}

message DiskTypeList {
  string id = 1;
  repeated DiskType items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetSslProxiesSetSslCertificatesRequest {
  repeated string ssl_certificates = 1;
}

message DistributionPolicyZoneConfiguration {
  string zone = 1;
}

message TargetHttpProxiesScopedList {
  repeated TargetHttpProxy target_http_proxies = 1;
  Warning warning = 2;
}

message SslPolicyReference {
  string ssl_policy = 1;
}

message PerInstanceConfig {
  string fingerprint = 1;
  string name = 2;
}

message RegionInstanceGroupManagersCreateInstancesRequest {
  repeated PerInstanceConfig instances = 1;
}

message TargetTcpProxy {
  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  string name = 5;
  ProxyHeader proxy_header = 6;
  string self_link = 7;
  string service = 8;
}

message TargetTcpProxyList {
  string id = 1;
  repeated TargetTcpProxy items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message HealthChecksAggregatedList {
  string id = 1;
  map<string, HealthChecksScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message AutoscalingPolicyLoadBalancingUtilization {
  double utilization_target = 1;
}

message AutoscalingPolicy {
  enum Mode {
    OFF = 0;
    ON = 1;
    ONLY_UP = 2;
  }

  int32 cool_down_period_sec = 1;
  AutoscalingPolicyCpuUtilization cpu_utilization = 2;
  repeated AutoscalingPolicyCustomMetricUtilization custom_metric_utilizations = 3;
  AutoscalingPolicyLoadBalancingUtilization load_balancing_utilization = 4;
  int32 max_num_replicas = 5;
  int32 min_num_replicas = 6;
  Mode mode = 7;
}

message DisksAddResourcePoliciesRequest {
  repeated string resource_policies = 1;
}

message SecurityPolicyRule {
  string action = 1;
  string description = 2;
  string kind = 3;
  SecurityPolicyRuleMatcher match = 4;
  bool preview = 5;
  int32 priority = 6;
}

message InstancesSetLabelsRequest {
  string label_fingerprint = 1;
  map<string, string> labels = 2;
}

message Region {
  enum Status {
    DOWN = 0;
    UP = 1;
  }

  string creation_timestamp = 1;
  DeprecationStatus deprecated = 2;
  string description = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  repeated Quota quotas = 7;
  string self_link = 8;
  Status status = 9;
  repeated string zones = 10;
}

message RegionList {
  string id = 1;
  repeated Region items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceGroupAggregatedList {
  string id = 1;
  map<string, InstanceGroupsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message FirewallLogConfig {
  bool enable = 1;
}

message TargetTcpProxiesSetProxyHeaderRequest {
  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  ProxyHeader proxy_header = 1;
}

message ReservationList {
  string id = 1;
  repeated Reservation items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message PathMatcher {
  HttpRouteAction default_route_action = 1;
  string default_service = 2;
  HttpRedirectAction default_url_redirect = 3;
  string description = 4;
  HttpHeaderAction header_action = 5;
  string name = 6;
  repeated PathRule path_rules = 7;
  repeated HttpRouteRule route_rules = 8;
}

message AcceleratorTypesScopedList {
  repeated AcceleratorType accelerator_types = 1;
  Warning warning = 2;
}

message AcceleratorTypeAggregatedList {
  string id = 1;
  map<string, AcceleratorTypesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message CommitmentsScopedList {
  repeated Commitment commitments = 1;
  Warning warning = 2;
}

message CommitmentAggregatedList {
  string id = 1;
  map<string, CommitmentsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message VpnGateway {
  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  string label_fingerprint = 5;
  map<string, string> labels = 6;
  string name = 7;
  string network = 8;
  string region = 9;
  string self_link = 10;
  repeated VpnGatewayVpnGatewayInterface vpn_interfaces = 11;
}

message VpnGatewayList {
  string id = 1;
  repeated VpnGateway items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message VpnGatewaysGetStatusResponse {
  VpnGatewayStatus result = 1;
}

message SecurityPolicyRuleMatcherConfig {
  repeated string src_ip_ranges = 1;
}

message Expr {
  string description = 1;
  string expression = 2;
  string location = 3;
  string title = 4;
}

message SecurityPolicyRuleMatcher {
  enum VersionedExpr {
    SRC_IPS_V1 = 0;
  }

  SecurityPolicyRuleMatcherConfig config = 1;
  Expr expr = 2;
  VersionedExpr versioned_expr = 3;
}

message InstanceGroupManagersDeleteInstancesRequest {
  repeated string instances = 1;
}

message InstanceGroupManagersListErrorsResponse {
  repeated InstanceManagedByIgmError items = 1;
  string next_page_token = 2;
}

message RegionSetPolicyRequest {
  repeated Binding bindings = 1;
  string etag = 2;
  Policy policy = 3;
}

message Quota {
  enum Metric {
    AFFINITY_GROUPS = 0;
    AUTOSCALERS = 1;
    BACKEND_BUCKETS = 2;
    BACKEND_SERVICES = 3;
    C2_CPUS = 4;
    COMMITMENTS = 5;
    COMMITTED_C2_CPUS = 6;
    COMMITTED_CPUS = 7;
    COMMITTED_LICENSES = 8;
    COMMITTED_LOCAL_SSD_TOTAL_GB = 9;
    COMMITTED_N2D_CPUS = 10;
    COMMITTED_N2_CPUS = 11;
    COMMITTED_NVIDIA_K80_GPUS = 12;
    COMMITTED_NVIDIA_P100_GPUS = 13;
    COMMITTED_NVIDIA_P4_GPUS = 14;
    COMMITTED_NVIDIA_T4_GPUS = 15;
    COMMITTED_NVIDIA_V100_GPUS = 16;
    CPUS = 17;
    CPUS_ALL_REGIONS = 18;
    DISKS_TOTAL_GB = 19;
    EXTERNAL_VPN_GATEWAYS = 20;
    FIREWALLS = 21;
    FORWARDING_RULES = 22;
    GLOBAL_INTERNAL_ADDRESSES = 23;
    GPUS_ALL_REGIONS = 24;
    HEALTH_CHECKS = 25;
    IMAGES = 26;
    INSTANCES = 27;
    INSTANCE_GROUPS = 28;
    INSTANCE_GROUP_MANAGERS = 29;
    INSTANCE_TEMPLATES = 30;
    INTERCONNECTS = 31;
    INTERCONNECT_ATTACHMENTS_PER_REGION = 32;
    INTERCONNECT_ATTACHMENTS_TOTAL_MBPS = 33;
    INTERCONNECT_TOTAL_GBPS = 34;
    INTERNAL_ADDRESSES = 35;
    IN_USE_ADDRESSES = 36;
    IN_USE_BACKUP_SCHEDULES = 37;
    IN_USE_SNAPSHOT_SCHEDULES = 38;
    LOCAL_SSD_TOTAL_GB = 39;
    MACHINE_IMAGES = 40;
    N2D_CPUS = 41;
    N2_CPUS = 42;
    NETWORKS = 43;
    NETWORK_ENDPOINT_GROUPS = 44;
    NODE_GROUPS = 45;
    NODE_TEMPLATES = 46;
    NVIDIA_K80_GPUS = 47;
    NVIDIA_P100_GPUS = 48;
    NVIDIA_P100_VWS_GPUS = 49;
    NVIDIA_P4_GPUS = 50;
    NVIDIA_P4_VWS_GPUS = 51;
    NVIDIA_T4_GPUS = 52;
    NVIDIA_T4_VWS_GPUS = 53;
    NVIDIA_V100_GPUS = 54;
    PACKET_MIRRORINGS = 55;
    PREEMPTIBLE_CPUS = 56;
    PREEMPTIBLE_LOCAL_SSD_GB = 57;
    PREEMPTIBLE_NVIDIA_K80_GPUS = 58;
    PREEMPTIBLE_NVIDIA_P100_GPUS = 59;
    PREEMPTIBLE_NVIDIA_P100_VWS_GPUS = 60;
    PREEMPTIBLE_NVIDIA_P4_GPUS = 61;
    PREEMPTIBLE_NVIDIA_P4_VWS_GPUS = 62;
    PREEMPTIBLE_NVIDIA_T4_GPUS = 63;
    PREEMPTIBLE_NVIDIA_T4_VWS_GPUS = 64;
    PREEMPTIBLE_NVIDIA_V100_GPUS = 65;
    REGIONAL_AUTOSCALERS = 66;
    REGIONAL_INSTANCE_GROUP_MANAGERS = 67;
    RESERVATIONS = 68;
    RESOURCE_POLICIES = 69;
    ROUTERS = 70;
    ROUTES = 71;
    SECURITY_POLICIES = 72;
    SECURITY_POLICY_CEVAL_RULES = 73;
    SECURITY_POLICY_RULES = 74;
    SNAPSHOTS = 75;
    SSD_TOTAL_GB = 76;
    SSL_CERTIFICATES = 77;
    STATIC_ADDRESSES = 78;
    SUBNETWORKS = 79;
    TARGET_HTTPS_PROXIES = 80;
    TARGET_HTTP_PROXIES = 81;
    TARGET_INSTANCES = 82;
    TARGET_POOLS = 83;
    TARGET_SSL_PROXIES = 84;
    TARGET_TCP_PROXIES = 85;
    TARGET_VPN_GATEWAYS = 86;
    URL_MAPS = 87;
    VPN_GATEWAYS = 88;
    VPN_TUNNELS = 89;
  }

  double limit = 1;
  Metric metric = 2;
  string owner = 3;
  double usage = 4;
}

message UsageExportLocation {
  string bucket_name = 1;
  string report_name_prefix = 2;
}

message Project {
  enum DefaultNetworkTier {
    PREMIUM = 0;
    STANDARD = 1;
  }

  enum XpnProjectStatus {
    HOST = 0;
    UNSPECIFIED_XPN_PROJECT_STATUS = 1;
  }

  Metadata common_instance_metadata = 1;
  string creation_timestamp = 2;
  DefaultNetworkTier default_network_tier = 3;
  string default_service_account = 4;
  string description = 5;
  repeated string enabled_features = 6;
  string id = 7;
  string kind = 8;
  string name = 9;
  repeated Quota quotas = 10;
  string self_link = 11;
  UsageExportLocation usage_export_location = 12;
  XpnProjectStatus xpn_project_status = 13;
}

message InstancesRemoveResourcePoliciesRequest {
  repeated string resource_policies = 1;
}

message HttpRouteRule {
  string description = 1;
  HttpHeaderAction header_action = 2;
  repeated HttpRouteRuleMatch match_rules = 3;
  int32 priority = 4;
  HttpRouteAction route_action = 5;
  string service = 6;
  HttpRedirectAction url_redirect = 7;
}

message PacketMirroringNetworkInfo {
  string canonical_url = 1;
  string url = 2;
}

message MetadataFilterLabelMatch {
  string name = 1;
  string value = 2;
}

message GlobalNetworkEndpointGroupsAttachEndpointsRequest {
  repeated NetworkEndpoint network_endpoints = 1;
}

message Items {
  string key = 1;
  string value = 2;
}

message NetworkEndpointGroup {
  enum NetworkEndpointType {
    GCE_VM_IP_PORT = 0;
    INTERNET_FQDN_PORT = 1;
    INTERNET_IP_PORT = 2;
  }

  string creation_timestamp = 1;
  int32 default_port = 2;
  string description = 3;
  string id = 4;
  string kind = 5;
  string name = 6;
  string network = 7;
  NetworkEndpointType network_endpoint_type = 8;
  string self_link = 9;
  int32 size = 10;
  string subnetwork = 11;
  string zone = 12;
}

message ConnectionDraining {
  int32 draining_timeout_sec = 1;
}

message ConsistentHashLoadBalancerSettings {
  ConsistentHashLoadBalancerSettingsHttpCookie http_cookie = 1;
  string http_header_name = 2;
  string minimum_ring_size = 3;
}

message OutlierDetection {
  Duration base_ejection_time = 1;
  int32 consecutive_errors = 2;
  int32 consecutive_gateway_failure = 3;
  int32 enforcing_consecutive_errors = 4;
  int32 enforcing_consecutive_gateway_failure = 5;
  int32 enforcing_success_rate = 6;
  Duration interval = 7;
  int32 max_ejection_percent = 8;
  int32 success_rate_minimum_hosts = 9;
  int32 success_rate_request_volume = 10;
  int32 success_rate_stdev_factor = 11;
}

message BackendService {
  enum LoadBalancingScheme {
    EXTERNAL = 0;
    INTERNAL = 1;
    INTERNAL_MANAGED = 2;
    INTERNAL_SELF_MANAGED = 3;
    INVALID_LOAD_BALANCING_SCHEME = 4;
  }

  enum LocalityLbPolicy {
    INVALID_LB_POLICY = 0;
    LEAST_REQUEST = 1;
    MAGLEV = 2;
    ORIGINAL_DESTINATION = 3;
    RANDOM = 4;
    RING_HASH = 5;
    ROUND_ROBIN = 6;
  }

  enum Protocol {
    HTTP = 0;
    HTTP2 = 1;
    HTTPS = 2;
    SSL = 3;
    TCP = 4;
    UDP = 5;
  }

  enum SessionAffinity {
    CLIENT_IP = 0;
    CLIENT_IP_PORT_PROTO = 1;
    CLIENT_IP_PROTO = 2;
    GENERATED_COOKIE = 3;
    HEADER_FIELD = 4;
    HTTP_COOKIE = 5;
    NONE = 6;
  }

  int32 affinity_cookie_ttl_sec = 1;
  repeated Backend backends = 2;
  BackendServiceCdnPolicy cdn_policy = 3;
  CircuitBreakers circuit_breakers = 4;
  ConnectionDraining connection_draining = 5;
  ConsistentHashLoadBalancerSettings consistent_hash = 6;
  string creation_timestamp = 7;
  repeated string custom_request_headers = 8;
  string description = 9;
  bool enable_c_d_n = 10;
  BackendServiceFailoverPolicy failover_policy = 11;
  string fingerprint = 12;
  repeated string health_checks = 13;
  BackendServiceIAP iap = 14;
  string id = 15;
  string kind = 16;
  LoadBalancingScheme load_balancing_scheme = 17;
  LocalityLbPolicy locality_lb_policy = 18;
  BackendServiceLogConfig log_config = 19;
  string name = 20;
  string network = 21;
  OutlierDetection outlier_detection = 22;
  int32 port = 23;
  string port_name = 24;
  Protocol protocol = 25;
  string region = 26;
  string security_policy = 27;
  string self_link = 28;
  SessionAffinity session_affinity = 29;
  int32 timeout_sec = 30;
}

message InstanceGroupsListInstances {
  string id = 1;
  repeated InstanceWithNamedPorts items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message NodeGroupNode {
  enum Status {
    CREATING = 0;
    DELETING = 1;
    INVALID = 2;
    READY = 3;
    REPAIRING = 4;
  }

  repeated string instances = 1;
  string name = 2;
  string node_type = 3;
  ServerBinding server_binding = 4;
  string server_id = 5;
  Status status = 6;
}

message ResourcePolicyHourlyCycle {
  string duration = 1;
  int32 hours_in_cycle = 2;
  string start_time = 3;
}

message TargetPoolsRemoveHealthCheckRequest {
  repeated HealthCheckReference health_checks = 1;
}

message BackendBucketCdnPolicy {
  string signed_url_cache_max_age_sec = 1;
  repeated string signed_url_key_names = 2;
}

message NodeGroupsDeleteNodesRequest {
  repeated string nodes = 1;
}

message AcceleratorType {
  string creation_timestamp = 1;
  DeprecationStatus deprecated = 2;
  string description = 3;
  string id = 4;
  string kind = 5;
  int32 maximum_cards_per_instance = 6;
  string name = 7;
  string self_link = 8;
  string zone = 9;
}

message TargetPoolsAddInstanceRequest {
  repeated InstanceReference instances = 1;
}

message VpnTunnelList {
  string id = 1;
  repeated VpnTunnel items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetSslProxy {
  enum ProxyHeader {
    NONE = 0;
    PROXY_V1 = 1;
  }

  string creation_timestamp = 1;
  string description = 2;
  string id = 3;
  string kind = 4;
  string name = 5;
  ProxyHeader proxy_header = 6;
  string self_link = 7;
  string service = 8;
  repeated string ssl_certificates = 9;
  string ssl_policy = 10;
}

message TargetSslProxyList {
  string id = 1;
  repeated TargetSslProxy items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ScratchDisks {
  int32 disk_gb = 1;
}

message BackendServicesScopedList {
  repeated BackendService backend_services = 1;
  Warning warning = 2;
}

message BackendServiceAggregatedList {
  string id = 1;
  map<string, BackendServicesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InterconnectDiagnosticsARPEntry {
  string ip_address = 1;
  string mac_address = 2;
}

message ZoneSetPolicyRequest {
  repeated Binding bindings = 1;
  string etag = 2;
  Policy policy = 3;
}

message Warnings {
  enum Code {
    CLEANUP_FAILED = 0;
    DEPRECATED_RESOURCE_USED = 1;
    DEPRECATED_TYPE_USED = 2;
    DISK_SIZE_LARGER_THAN_IMAGE_SIZE = 3;
    EXPERIMENTAL_TYPE_USED = 4;
    EXTERNAL_API_WARNING = 5;
    FIELD_VALUE_OVERRIDEN = 6;
    INJECTED_KERNELS_DEPRECATED = 7;
    MISSING_TYPE_DEPENDENCY = 8;
    NEXT_HOP_ADDRESS_NOT_ASSIGNED = 9;
    NEXT_HOP_CANNOT_IP_FORWARD = 10;
    NEXT_HOP_INSTANCE_NOT_FOUND = 11;
    NEXT_HOP_INSTANCE_NOT_ON_NETWORK = 12;
    NEXT_HOP_NOT_RUNNING = 13;
    NOT_CRITICAL_ERROR = 14;
    NO_RESULTS_ON_PAGE = 15;
    REQUIRED_TOS_AGREEMENT = 16;
    RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING = 17;
    RESOURCE_NOT_DELETED = 18;
    SCHEMA_VALIDATION_IGNORED = 19;
    SINGLE_INSTANCE_PROPERTY_TEMPLATE = 20;
    UNDECLARED_PROPERTIES = 21;
    UNREACHABLE = 22;
  }

  Code code = 1;
  repeated Data data = 2;
  string message = 3;
}

message GuestAttributes {
  string kind = 1;
  string query_path = 2;
  GuestAttributesValue query_value = 3;
  string self_link = 4;
  string variable_key = 5;
  string variable_value = 6;
}

message ManagedInstanceLastAttempt {
  Errors errors = 1;
}

message ManagedInstanceVersion {
  string instance_template = 1;
  string name = 2;
}

message ManagedInstance {
  enum CurrentAction {
    ABANDONING = 0;
    CREATING = 1;
    CREATING_WITHOUT_RETRIES = 2;
    DELETING = 3;
    NONE = 4;
    RECREATING = 5;
    REFRESHING = 6;
    RESTARTING = 7;
    VERIFYING = 8;
  }

  enum InstanceStatus {
    DEPROVISIONING = 0;
    PROVISIONING = 1;
    REPAIRING = 2;
    RUNNING = 3;
    STAGING = 4;
    STOPPED = 5;
    STOPPING = 6;
    SUSPENDED = 7;
    SUSPENDING = 8;
    TERMINATED = 9;
  }

  CurrentAction current_action = 1;
  string id = 2;
  string instance = 3;
  repeated ManagedInstanceInstanceHealth instance_health = 4;
  InstanceStatus instance_status = 5;
  ManagedInstanceLastAttempt last_attempt = 6;
  ManagedInstanceVersion version = 7;
}

message AcceleratorTypeList {
  string id = 1;
  repeated AcceleratorType items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message OperationsScopedList {
  repeated Operation operations = 1;
  Warning warning = 2;
}

message OperationAggregatedList {
  string id = 1;
  map<string, OperationsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Firewall {
  enum Direction {
    EGRESS = 0;
    INGRESS = 1;
  }

  repeated Allowed allowed = 1;
  string creation_timestamp = 2;
  repeated Denied denied = 3;
  string description = 4;
  repeated string destination_ranges = 5;
  Direction direction = 6;
  bool disabled = 7;
  string id = 8;
  string kind = 9;
  FirewallLogConfig log_config = 10;
  string name = 11;
  string network = 12;
  int32 priority = 13;
  string self_link = 14;
  repeated string source_ranges = 15;
  repeated string source_service_accounts = 16;
  repeated string source_tags = 17;
  repeated string target_service_accounts = 18;
  repeated string target_tags = 19;
}

message FirewallList {
  string id = 1;
  repeated Firewall items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RoutersPreviewResponse {
  Router resource = 1;
}

message RegionUrlMapsValidateRequest {
  UrlMap resource = 1;
}

message Interconnect {
  enum InterconnectType {
    DEDICATED = 0;
    IT_PRIVATE = 1;
    PARTNER = 2;
  }

  enum LinkType {
    LINK_TYPE_ETHERNET_100G_LR = 0;
    LINK_TYPE_ETHERNET_10G_LR = 1;
  }

  enum OperationalStatus {
    OS_ACTIVE = 0;
    OS_UNPROVISIONED = 1;
  }

  enum State {
    ACTIVE = 0;
    UNPROVISIONED = 1;
  }

  bool admin_enabled = 1;
  repeated InterconnectCircuitInfo circuit_infos = 2;
  string creation_timestamp = 3;
  string customer_name = 4;
  string description = 5;
  repeated InterconnectOutageNotification expected_outages = 6;
  string google_ip_address = 7;
  string google_reference_id = 8;
  string id = 9;
  repeated string interconnect_attachments = 10;
  InterconnectType interconnect_type = 11;
  string kind = 12;
  LinkType link_type = 13;
  string location = 14;
  string name = 15;
  string noc_contact_email = 16;
  OperationalStatus operational_status = 17;
  string peer_ip_address = 18;
  int32 provisioned_link_count = 19;
  int32 requested_link_count = 20;
  string self_link = 21;
  State state = 22;
}

message InterconnectList {
  string id = 1;
  repeated Interconnect items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RouterAggregatedList {
  string id = 1;
  map<string, RoutersScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetHttpsProxiesSetSslCertificatesRequest {
  repeated string ssl_certificates = 1;
}

message LogConfigDataAccessOptions {
  enum LogMode {
    LOG_FAIL_CLOSED = 0;
    LOG_MODE_UNSPECIFIED = 1;
  }

  LogMode log_mode = 1;
}

message PacketMirroring {
  enum Enable {
    FALSE = 0;
    TRUE = 1;
  }

  PacketMirroringForwardingRuleInfo collector_ilb = 1;
  string creation_timestamp = 2;
  string description = 3;
  Enable enable = 4;
  PacketMirroringFilter filter = 5;
  string id = 6;
  string kind = 7;
  PacketMirroringMirroredResourceInfo mirrored_resources = 8;
  string name = 9;
  PacketMirroringNetworkInfo network = 10;
  uint32 priority = 11;
  string region = 12;
  string self_link = 13;
}

message LogConfigCloudAuditOptions {
  enum LogName {
    ADMIN_ACTIVITY = 0;
    DATA_ACCESS = 1;
    UNSPECIFIED_LOG_NAME = 2;
  }

  AuthorizationLoggingOptions authorization_logging_options = 1;
  LogName log_name = 2;
}

message TargetPoolsRemoveInstanceRequest {
  repeated InstanceReference instances = 1;
}

message UrlMapsValidateRequest {
  UrlMap resource = 1;
}

message GlobalSetLabelsRequest {
  string label_fingerprint = 1;
  map<string, string> labels = 2;
}

message RouterStatusResponse {
  string kind = 1;
  RouterStatus result = 2;
}

message InterconnectAttachment {
  enum Bandwidth {
    BPS_100M = 0;
    BPS_10G = 1;
    BPS_1G = 2;
    BPS_200M = 3;
    BPS_20G = 4;
    BPS_2G = 5;
    BPS_300M = 6;
    BPS_400M = 7;
    BPS_500M = 8;
    BPS_50G = 9;
    BPS_50M = 10;
    BPS_5G = 11;
  }

  enum EdgeAvailabilityDomain {
    AVAILABILITY_DOMAIN_1 = 0;
    AVAILABILITY_DOMAIN_2 = 1;
    AVAILABILITY_DOMAIN_ANY = 2;
  }

  enum OperationalStatus {
    OS_ACTIVE = 0;
    OS_UNPROVISIONED = 1;
  }

  enum State {
    ACTIVE = 0;
    DEFUNCT = 1;
    PARTNER_REQUEST_RECEIVED = 2;
    PENDING_CUSTOMER = 3;
    PENDING_PARTNER = 4;
    STATE_UNSPECIFIED = 5;
    UNPROVISIONED = 6;
  }

  enum Type {
    DEDICATED = 0;
    PARTNER = 1;
    PARTNER_PROVIDER = 2;
  }

  bool admin_enabled = 1;
  Bandwidth bandwidth = 2;
  repeated string candidate_subnets = 3;
  string cloud_router_ip_address = 4;
  string creation_timestamp = 5;
  string customer_router_ip_address = 6;
  string description = 7;
  EdgeAvailabilityDomain edge_availability_domain = 8;
  string google_reference_id = 9;
  string id = 10;
  string interconnect = 11;
  string kind = 12;
  string name = 13;
  OperationalStatus operational_status = 14;
  string pairing_key = 15;
  string partner_asn = 16;
  InterconnectAttachmentPartnerMetadata partner_metadata = 17;
  InterconnectAttachmentPrivateInfo private_interconnect_info = 18;
  string region = 19;
  string router = 20;
  string self_link = 21;
  State state = 22;
  Type type = 23;
}

message AutoscalerList {
  string id = 1;
  repeated Autoscaler items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ResourcePolicyDailyCycle {
  int32 days_in_cycle = 1;
  string duration = 2;
  string start_time = 3;
}

message SubnetworkAggregatedList {
  string id = 1;
  map<string, SubnetworksScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceGroupsListInstancesRequest {
  enum InstanceState {
    ALL = 0;
    RUNNING = 1;
  }

  InstanceState instance_state = 1;
}

message LogConfigCounterOptionsCustomField {
  string name = 1;
  string value = 2;
}

message LogConfigCounterOptions {
  repeated LogConfigCounterOptionsCustomField custom_fields = 1;
  string field = 2;
  string metric = 3;
}

message ProjectsDisableXpnResourceRequest {
  XpnResourceId xpn_resource = 1;
}

message ReservationAggregatedList {
  string id = 1;
  map<string, ReservationsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message DiskAggregatedList {
  string id = 1;
  map<string, DisksScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceGroupManagersCreateInstancesRequest {
  repeated PerInstanceConfig instances = 1;
}

message NetworksUpdatePeeringRequest {
  NetworkPeering network_peering = 1;
}

message PacketMirroringList {
  string id = 1;
  repeated PacketMirroring items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message XpnHostList {
  string id = 1;
  repeated Project items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message SubnetworkList {
  string id = 1;
  repeated Subnetwork items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message UsableSubnetworkSecondaryRange {
  string ip_cidr_range = 1;
  string range_name = 2;
}

message VpnGatewayStatusTunnel {
  uint32 local_gateway_interface = 1;
  uint32 peer_gateway_interface = 2;
  string tunnel_url = 3;
}

message AutoscalerAggregatedList {
  string id = 1;
  map<string, AutoscalersScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RegionInstanceGroupManagersListInstancesResponse {
  repeated ManagedInstance managed_instances = 1;
}

message ProjectsGetXpnResources {
  string kind = 1;
  string next_page_token = 2;
  repeated XpnResourceId resources = 3;
}

message SnapshotList {
  string id = 1;
  repeated Snapshot items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RegionInstanceGroupsListInstancesRequest {
  enum InstanceState {
    ALL = 0;
    RUNNING = 1;
  }

  InstanceState instance_state = 1;
  string port_name = 2;
}

message TargetHttpProxyAggregatedList {
  string id = 1;
  map<string, TargetHttpProxiesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
}

message AttachedDiskInitializeParams {
  enum OnUpdateAction {
    RECREATE_DISK = 0;
    RECREATE_DISK_IF_SOURCE_CHANGED = 1;
    USE_EXISTING_DISK = 2;
  }

  string description = 1;
  string disk_name = 2;
  string disk_size_gb = 3;
  string disk_type = 4;
  map<string, string> labels = 5;
  OnUpdateAction on_update_action = 6;
  repeated string resource_policies = 7;
  string source_image = 8;
  CustomerEncryptionKey source_image_encryption_key = 9;
  string source_snapshot = 10;
  CustomerEncryptionKey source_snapshot_encryption_key = 11;
}

message TargetHttpProxyList {
  string id = 1;
  repeated TargetHttpProxy items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message AutoscalerStatusDetails {
  enum Type {
    ALL_INSTANCES_UNHEALTHY = 0;
    BACKEND_SERVICE_DOES_NOT_EXIST = 1;
    CAPPED_AT_MAX_NUM_REPLICAS = 2;
    CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE = 3;
    CUSTOM_METRIC_INVALID = 4;
    MIN_EQUALS_MAX = 5;
    MISSING_CUSTOM_METRIC_DATA_POINTS = 6;
    MISSING_LOAD_BALANCING_DATA_POINTS = 7;
    MODE_OFF = 8;
    MODE_ONLY_UP = 9;
    MORE_THAN_ONE_BACKEND_SERVICE = 10;
    NOT_ENOUGH_QUOTA_AVAILABLE = 11;
    REGION_RESOURCE_STOCKOUT = 12;
    SCALING_TARGET_DOES_NOT_EXIST = 13;
    UNKNOWN = 14;
    UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION = 15;
    ZONE_RESOURCE_STOCKOUT = 16;
  }

  string message = 1;
  Type type = 2;
}

message InstanceGroupManagerStatusVersionTarget {
  bool is_reached = 1;
}

message NodeGroupsListNodes {
  string id = 1;
  repeated NodeGroupNode items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ForwardingRuleReference {
  string forwarding_rule = 1;
}

message HealthStatusForNetworkEndpoint {
  enum HealthState {
    DRAINING = 0;
    HEALTHY = 1;
    UNHEALTHY = 2;
    UNKNOWN = 3;
  }

  BackendServiceReference backend_service = 1;
  ForwardingRuleReference forwarding_rule = 2;
  HealthCheckReference health_check = 3;
  HealthState health_state = 4;
}

message TargetTcpProxiesSetBackendServiceRequest {
  string service = 1;
}

message NetworkEndpointGroupList {
  string id = 1;
  repeated NetworkEndpointGroup items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetInstanceList {
  string id = 1;
  repeated TargetInstance items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceGroupManagerList {
  string id = 1;
  repeated InstanceGroupManager items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RouteList {
  string id = 1;
  repeated Route items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ReservationsResizeRequest {
  string specific_sku_count = 1;
}

message InstanceGroupList {
  string id = 1;
  repeated InstanceGroup items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstancesSetMachineTypeRequest {
  string machine_type = 1;
}

message VpnTunnelsScopedList {
  repeated VpnTunnel vpn_tunnels = 1;
  Warning warning = 2;
}

message VpnTunnelAggregatedList {
  string id = 1;
  map<string, VpnTunnelsScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ResourcePolicyWeeklyCycle {
  repeated ResourcePolicyWeeklyCycleDayOfWeek day_of_weeks = 1;
}

message RegionInstanceGroupManagersAbandonInstancesRequest {
  repeated string instances = 1;
}

message RegionAutoscalerList {
  string id = 1;
  repeated Autoscaler items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetReference {
  string target = 1;
}

message InterconnectAttachmentList {
  string id = 1;
  repeated InterconnectAttachment items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message VmEndpointNatMappingsList {
  string id = 1;
  string kind = 2;
  string next_page_token = 3;
  repeated VmEndpointNatMappings result = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RegionInstanceGroupsSetNamedPortsRequest {
  string fingerprint = 1;
  repeated NamedPort named_ports = 2;
}

message LogConfig {
  LogConfigCloudAuditOptions cloud_audit = 1;
  LogConfigCounterOptions counter = 2;
  LogConfigDataAccessOptions data_access = 3;
}

message Rule {
  enum Action {
    ALLOW = 0;
    ALLOW_WITH_LOG = 1;
    DENY = 2;
    DENY_WITH_LOG = 3;
    LOG = 4;
    NO_ACTION = 5;
  }

  Action action = 1;
  repeated Condition conditions = 2;
  string description = 3;
  repeated string ins = 4;
  repeated LogConfig log_configs = 5;
  repeated string not_ins = 6;
  repeated string permissions = 7;
}

message InstanceList {
  string id = 1;
  repeated Instance items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message CacheInvalidationRule {
  string host = 1;
  string path = 2;
}

message RegionInstanceGroupList {
  string id = 1;
  repeated InstanceGroup items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ShieldedInstanceIdentity {
  ShieldedInstanceIdentityEntry encryption_key = 1;
  string kind = 2;
  ShieldedInstanceIdentityEntry signing_key = 3;
}

message Errors {
  string code = 1;
  string location = 2;
  string message = 3;
}

message HttpsHealthCheckList {
  string id = 1;
  repeated HttpsHealthCheck items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message BackendServiceList {
  string id = 1;
  repeated BackendService items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Reference {
  string kind = 1;
  string reference_type = 2;
  string referrer = 3;
  string target = 4;
}

message Allowed {
  string i_p_protocol = 1;
  repeated string ports = 2;
}

message Denied {
  string i_p_protocol = 1;
  repeated string ports = 2;
}

message ImageList {
  string id = 1;
  repeated Image items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ForwardingRuleList {
  string id = 1;
  repeated ForwardingRule items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message SslCertificateAggregatedList {
  string id = 1;
  map<string, SslCertificatesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message DiskList {
  string id = 1;
  repeated Disk items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message ProjectsSetDefaultNetworkTierRequest {
  enum NetworkTier {
    PREMIUM = 0;
    STANDARD = 1;
  }

  NetworkTier network_tier = 1;
}

message InterconnectDiagnosticsLinkStatus {
  repeated InterconnectDiagnosticsARPEntry arp_caches = 1;
  string circuit_id = 2;
  string google_demarc = 3;
  InterconnectDiagnosticsLinkLACPStatus lacp_status = 4;
  InterconnectDiagnosticsLinkOpticalPower receiving_optical_power = 5;
  InterconnectDiagnosticsLinkOpticalPower transmitting_optical_power = 6;
}

message ExternalVpnGatewayList {
  string etag = 1;
  string id = 2;
  repeated ExternalVpnGateway items = 3;
  string kind = 4;
  string next_page_token = 5;
  string self_link = 6;
  Warning warning = 7;
}

message NodeTemplateAggregatedList {
  string id = 1;
  map<string, NodeTemplatesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Operation {
  enum Status {
    DONE = 0;
    PENDING = 1;
    RUNNING = 2;
  }

  string client_operation_id = 1;
  string creation_timestamp = 2;
  string description = 3;
  string end_time = 4;
  Error error = 5;
  string http_error_message = 6;
  int32 http_error_status_code = 7;
  string id = 8;
  string insert_time = 9;
  string kind = 10;
  string name = 11;
  string operation_type = 12;
  int32 progress = 13;
  string region = 14;
  string self_link = 15;
  string start_time = 16;
  Status status = 17;
  string status_message = 18;
  string target_id = 19;
  string target_link = 20;
  string user = 21;
  repeated Warnings warnings = 22;
  string zone = 23;
}

message OperationList {
  string id = 1;
  repeated Operation items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message RegionSetLabelsRequest {
  string label_fingerprint = 1;
  map<string, string> labels = 2;
}

message InstanceGroupManagersListManagedInstancesResponse {
  repeated ManagedInstance managed_instances = 1;
}

message AccessConfig {
  enum NetworkTier {
    PREMIUM = 0;
    STANDARD = 1;
  }

  enum Type {
    ONE_TO_ONE_NAT = 0;
  }

  string kind = 1;
  string name = 2;
  string nat_i_p = 3;
  NetworkTier network_tier = 4;
  string public_ptr_domain_name = 5;
  bool set_public_ptr = 6;
  Type type = 7;
}

message DisksResizeRequest {
  string size_gb = 1;
}

message NetworksRemovePeeringRequest {
  string name = 1;
}

message ResourceGroupReference {
  string group = 1;
}

message SerialPortOutput {
  string contents = 1;
  string kind = 2;
  string next = 3;
  string self_link = 4;
  string start = 5;
}

message InstanceListReferrers {
  string id = 1;
  repeated Reference items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message Error {
  repeated Errors errors = 1;
}

message NodeTypeAggregatedList {
  string id = 1;
  map<string, NodeTypesScopedList> items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message TargetHttpsProxyList {
  string id = 1;
  repeated TargetHttpsProxy items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message AddressList {
  string id = 1;
  repeated Address items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message HealthCheckList {
  string id = 1;
  repeated HealthCheck items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message InstanceMoveRequest {
  string destination_zone = 1;
  string target_instance = 2;
}

message InstanceGroupsSetNamedPortsRequest {
  string fingerprint = 1;
  repeated NamedPort named_ports = 2;
}

message InstanceGroupManagersSetInstanceTemplateRequest {
  string instance_template = 1;
}

message RegionInstanceGroupManagersRecreateRequest {
  repeated string instances = 1;
}

message InstanceGroupsAddInstancesRequest {
  repeated InstanceReference instances = 1;
}

message NodeTemplateList {
  string id = 1;
  repeated NodeTemplate items = 2;
  string kind = 3;
  string next_page_token = 4;
  string self_link = 5;
  Warning warning = 6;
}

message AggregatedListAcceleratorTypesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message GetAcceleratorTypeRequest {
  string accelerator_type = 1;
  string zone = 2;
  string project = 3;
}

message ListAcceleratorTypesRequest {
  string zone = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListAddressesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteAddressRequest {
  string address = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
}

message GetAddressRequest {
  string address = 1;
  string project = 2;
  string region = 3;
}

message InsertAddressRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  Address address_resource = 4;
}

message ListAddressesRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListAutoscalersRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteAutoscalerRequest {
  string autoscaler = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
}

message GetAutoscalerRequest {
  string autoscaler = 1;
  string zone = 2;
  string project = 3;
}

message InsertAutoscalerRequest {
  string zone = 1;
  string project = 2;
  string request_id = 3;
  Autoscaler autoscaler_resource = 4;
}

message ListAutoscalersRequest {
  string zone = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message PatchAutoscalerRequest {
  string zone = 1;
  string project = 2;
  string autoscaler = 3;
  string request_id = 4;
  Autoscaler autoscaler_resource = 5;
}

message UpdateAutoscalerRequest {
  string zone = 1;
  string project = 2;
  string autoscaler = 3;
  string request_id = 4;
  Autoscaler autoscaler_resource = 5;
}

message AddSignedUrlKeyBackendBucketRequest {
  string backend_bucket = 1;
  string project = 2;
  string request_id = 3;
  SignedUrlKey signed_url_key_resource = 4;
}

message DeleteBackendBucketRequest {
  string backend_bucket = 1;
  string project = 2;
  string request_id = 3;
}

message DeleteSignedUrlKeyBackendBucketRequest {
  string backend_bucket = 1;
  string project = 2;
  string request_id = 3;
  string key_name = 4;
}

message GetBackendBucketRequest {
  string backend_bucket = 1;
  string project = 2;
}

message InsertBackendBucketRequest {
  string project = 1;
  string request_id = 2;
  BackendBucket backend_bucket_resource = 3;
}

message ListBackendBucketsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message PatchBackendBucketRequest {
  string backend_bucket = 1;
  string project = 2;
  string request_id = 3;
  BackendBucket backend_bucket_resource = 4;
}

message UpdateBackendBucketRequest {
  string backend_bucket = 1;
  string project = 2;
  string request_id = 3;
  BackendBucket backend_bucket_resource = 4;
}

message AddSignedUrlKeyBackendServiceRequest {
  string backend_service = 1;
  string project = 2;
  string request_id = 3;
  SignedUrlKey signed_url_key_resource = 4;
}

message AggregatedListBackendServicesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteBackendServiceRequest {
  string backend_service = 1;
  string project = 2;
  string request_id = 3;
}

message DeleteSignedUrlKeyBackendServiceRequest {
  string backend_service = 1;
  string project = 2;
  string request_id = 3;
  string key_name = 4;
}

message GetBackendServiceRequest {
  string backend_service = 1;
  string project = 2;
}

message GetHealthBackendServiceRequest {
  string backend_service = 1;
  string project = 2;
  ResourceGroupReference resource_group_reference_resource = 3;
}

message InsertBackendServiceRequest {
  string project = 1;
  string request_id = 2;
  BackendService backend_service_resource = 3;
}

message ListBackendServicesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message PatchBackendServiceRequest {
  string backend_service = 1;
  string project = 2;
  string request_id = 3;
  BackendService backend_service_resource = 4;
}

message SetSecurityPolicyBackendServiceRequest {
  string backend_service = 1;
  string project = 2;
  string request_id = 3;
  SecurityPolicyReference security_policy_reference_resource = 4;
}

message UpdateBackendServiceRequest {
  string backend_service = 1;
  string project = 2;
  string request_id = 3;
  BackendService backend_service_resource = 4;
}

message AggregatedListDiskTypesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message GetDiskTypeRequest {
  string zone = 1;
  string project = 2;
  string disk_type = 3;
}

message ListDiskTypesRequest {
  string zone = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message AddResourcePoliciesDiskRequest {
  string disk = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  DisksAddResourcePoliciesRequest disks_add_resource_policies_request_resource = 5;
}

message AggregatedListDisksRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message CreateSnapshotDiskRequest {
  string disk = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  bool guest_flush = 5;
  Snapshot snapshot_resource = 6;
}

message DeleteDiskRequest {
  string disk = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
}

message GetDiskRequest {
  string disk = 1;
  string zone = 2;
  string project = 3;
}

message GetIamPolicyDiskRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
}

message InsertDiskRequest {
  string zone = 1;
  string project = 2;
  string request_id = 3;
  string source_image = 4;
  Disk disk_resource = 5;
}

message ListDisksRequest {
  string zone = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message RemoveResourcePoliciesDiskRequest {
  string disk = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  DisksRemoveResourcePoliciesRequest disks_remove_resource_policies_request_resource = 5;
}

message ResizeDiskRequest {
  string disk = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  DisksResizeRequest disks_resize_request_resource = 5;
}

message SetIamPolicyDiskRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
  ZoneSetPolicyRequest zone_set_policy_request_resource = 4;
}

message SetLabelsDiskRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  ZoneSetLabelsRequest zone_set_labels_request_resource = 5;
}

message TestIamPermissionsDiskRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
  TestPermissionsRequest test_permissions_request_resource = 4;
}

message DeleteExternalVpnGatewayRequest {
  string project = 1;
  string external_vpn_gateway = 2;
  string request_id = 3;
}

message GetExternalVpnGatewayRequest {
  string project = 1;
  string external_vpn_gateway = 2;
}

message InsertExternalVpnGatewayRequest {
  string project = 1;
  string request_id = 2;
  ExternalVpnGateway external_vpn_gateway_resource = 3;
}

message ListExternalVpnGatewaysRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message SetLabelsExternalVpnGatewayRequest {
  string resource = 1;
  string project = 2;
  GlobalSetLabelsRequest global_set_labels_request_resource = 3;
}

message TestIamPermissionsExternalVpnGatewayRequest {
  string resource = 1;
  string project = 2;
  TestPermissionsRequest test_permissions_request_resource = 3;
}

message DeleteFirewallRequest {
  string firewall = 1;
  string project = 2;
  string request_id = 3;
}

message GetFirewallRequest {
  string firewall = 1;
  string project = 2;
}

message InsertFirewallRequest {
  string project = 1;
  string request_id = 2;
  Firewall firewall_resource = 3;
}

message ListFirewallsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message PatchFirewallRequest {
  string firewall = 1;
  string project = 2;
  string request_id = 3;
  Firewall firewall_resource = 4;
}

message UpdateFirewallRequest {
  string firewall = 1;
  string project = 2;
  string request_id = 3;
  Firewall firewall_resource = 4;
}

message AggregatedListForwardingRulesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteForwardingRuleRequest {
  string forwarding_rule = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
}

message GetForwardingRuleRequest {
  string forwarding_rule = 1;
  string project = 2;
  string region = 3;
}

message InsertForwardingRuleRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  ForwardingRule forwarding_rule_resource = 4;
}

message ListForwardingRulesRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message PatchForwardingRuleRequest {
  string forwarding_rule = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  ForwardingRule forwarding_rule_resource = 5;
}

message SetTargetForwardingRuleRequest {
  string forwarding_rule = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  TargetReference target_reference_resource = 5;
}

message DeleteGlobalAddressRequest {
  string address = 1;
  string project = 2;
  string request_id = 3;
}

message GetGlobalAddressRequest {
  string address = 1;
  string project = 2;
}

message InsertGlobalAddressRequest {
  string project = 1;
  string request_id = 2;
  Address address_resource = 3;
}

message ListGlobalAddressesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message DeleteGlobalForwardingRuleRequest {
  string forwarding_rule = 1;
  string project = 2;
  string request_id = 3;
}

message GetGlobalForwardingRuleRequest {
  string forwarding_rule = 1;
  string project = 2;
}

message InsertGlobalForwardingRuleRequest {
  string project = 1;
  string request_id = 2;
  ForwardingRule forwarding_rule_resource = 3;
}

message ListGlobalForwardingRulesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message PatchGlobalForwardingRuleRequest {
  string forwarding_rule = 1;
  string project = 2;
  string request_id = 3;
  ForwardingRule forwarding_rule_resource = 4;
}

message SetTargetGlobalForwardingRuleRequest {
  string forwarding_rule = 1;
  string project = 2;
  string request_id = 3;
  TargetReference target_reference_resource = 4;
}

message AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest {
  string network_endpoint_group = 1;
  string project = 2;
  string request_id = 3;
  GlobalNetworkEndpointGroupsAttachEndpointsRequest global_network_endpoint_groups_attach_endpoints_request_resource = 4;
}

message DeleteGlobalNetworkEndpointGroupRequest {
  string network_endpoint_group = 1;
  string project = 2;
  string request_id = 3;
}

message DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest {
  string network_endpoint_group = 1;
  string project = 2;
  string request_id = 3;
  GlobalNetworkEndpointGroupsDetachEndpointsRequest global_network_endpoint_groups_detach_endpoints_request_resource = 4;
}

message GetGlobalNetworkEndpointGroupRequest {
  string network_endpoint_group = 1;
  string project = 2;
}

message InsertGlobalNetworkEndpointGroupRequest {
  string project = 1;
  string request_id = 2;
  NetworkEndpointGroup network_endpoint_group_resource = 3;
}

message ListGlobalNetworkEndpointGroupsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest {
  string network_endpoint_group = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListGlobalOperationsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteGlobalOperationRequest {
  string project = 1;
  string operation = 2;
}

message DeleteGlobalOperationResponse {
}

message GetGlobalOperationRequest {
  string project = 1;
  string operation = 2;
}

message ListGlobalOperationsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message WaitGlobalOperationRequest {
  string project = 1;
  string operation = 2;
}

message AggregatedListHealthChecksRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteHealthCheckRequest {
  string health_check = 1;
  string project = 2;
  string request_id = 3;
}

message GetHealthCheckRequest {
  string health_check = 1;
  string project = 2;
}

message InsertHealthCheckRequest {
  string project = 1;
  string request_id = 2;
  HealthCheck health_check_resource = 3;
}

message ListHealthChecksRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message PatchHealthCheckRequest {
  string health_check = 1;
  string project = 2;
  string request_id = 3;
  HealthCheck health_check_resource = 4;
}

message UpdateHealthCheckRequest {
  string health_check = 1;
  string project = 2;
  string request_id = 3;
  HealthCheck health_check_resource = 4;
}

message DeleteHttpHealthCheckRequest {
  string project = 1;
  string http_health_check = 2;
  string request_id = 3;
}

message GetHttpHealthCheckRequest {
  string project = 1;
  string http_health_check = 2;
}

message InsertHttpHealthCheckRequest {
  string project = 1;
  string request_id = 2;
  HttpHealthCheck http_health_check_resource = 3;
}

message ListHttpHealthChecksRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message PatchHttpHealthCheckRequest {
  string project = 1;
  string http_health_check = 2;
  string request_id = 3;
  HttpHealthCheck http_health_check_resource = 4;
}

message UpdateHttpHealthCheckRequest {
  string project = 1;
  string http_health_check = 2;
  string request_id = 3;
  HttpHealthCheck http_health_check_resource = 4;
}

message DeleteHttpsHealthCheckRequest {
  string https_health_check = 1;
  string project = 2;
  string request_id = 3;
}

message GetHttpsHealthCheckRequest {
  string https_health_check = 1;
  string project = 2;
}

message InsertHttpsHealthCheckRequest {
  string project = 1;
  string request_id = 2;
  HttpsHealthCheck https_health_check_resource = 3;
}

message ListHttpsHealthChecksRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message PatchHttpsHealthCheckRequest {
  string https_health_check = 1;
  string project = 2;
  string request_id = 3;
  HttpsHealthCheck https_health_check_resource = 4;
}

message UpdateHttpsHealthCheckRequest {
  string https_health_check = 1;
  string project = 2;
  string request_id = 3;
  HttpsHealthCheck https_health_check_resource = 4;
}

message DeleteImageRequest {
  string image = 1;
  string project = 2;
  string request_id = 3;
}

message DeprecateImageRequest {
  string image = 1;
  string project = 2;
  string request_id = 3;
  DeprecationStatus deprecation_status_resource = 4;
}

message GetImageRequest {
  string image = 1;
  string project = 2;
}

message GetFromFamilyImageRequest {
  string project = 1;
  string family = 2;
}

message GetIamPolicyImageRequest {
  string resource = 1;
  string project = 2;
}

message InsertImageRequest {
  string project = 1;
  bool force_create = 2;
  string request_id = 3;
  Image image_resource = 4;
}

message ListImagesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message SetIamPolicyImageRequest {
  string resource = 1;
  string project = 2;
  GlobalSetPolicyRequest global_set_policy_request_resource = 3;
}

message SetLabelsImageRequest {
  string resource = 1;
  string project = 2;
  GlobalSetLabelsRequest global_set_labels_request_resource = 3;
}

message TestIamPermissionsImageRequest {
  string resource = 1;
  string project = 2;
  TestPermissionsRequest test_permissions_request_resource = 3;
}

message AbandonInstancesInstanceGroupManagerRequest {
  string zone = 1;
  string instance_group_manager = 2;
  string project = 3;
  string request_id = 4;
  InstanceGroupManagersAbandonInstancesRequest instance_group_managers_abandon_instances_request_resource = 5;
}

message AggregatedListInstanceGroupManagersRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message ApplyUpdatesToInstancesInstanceGroupManagerRequest {
  string zone = 1;
  string instance_group_manager = 2;
  string project = 3;
  InstanceGroupManagersApplyUpdatesRequest instance_group_managers_apply_updates_request_resource = 4;
}

message CreateInstancesInstanceGroupManagerRequest {
  string zone = 1;
  string instance_group_manager = 2;
  string project = 3;
  string request_id = 4;
  InstanceGroupManagersCreateInstancesRequest instance_group_managers_create_instances_request_resource = 5;
}

message DeleteInstanceGroupManagerRequest {
  string zone = 1;
  string instance_group_manager = 2;
  string project = 3;
  string request_id = 4;
}

message DeleteInstancesInstanceGroupManagerRequest {
  string zone = 1;
  string instance_group_manager = 2;
  string project = 3;
  string request_id = 4;
  InstanceGroupManagersDeleteInstancesRequest instance_group_managers_delete_instances_request_resource = 5;
}

message GetInstanceGroupManagerRequest {
  string zone = 1;
  string instance_group_manager = 2;
  string project = 3;
}

message InsertInstanceGroupManagerRequest {
  string zone = 1;
  string project = 2;
  string request_id = 3;
  InstanceGroupManager instance_group_manager_resource = 4;
}

message ListInstanceGroupManagersRequest {
  string zone = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message ListErrorsInstanceGroupManagersRequest {
  string zone = 1;
  string instance_group_manager = 2;
  string project = 3;
  string filter = 4;
  uint32 max_results = 5;
  string order_by = 6;
  string page_token = 7;
}

message ListManagedInstancesInstanceGroupManagersRequest {
  string zone = 1;
  string instance_group_manager = 2;
  string project = 3;
  string filter = 4;
  uint32 max_results = 5;
  string order_by = 6;
  string page_token = 7;
}

message PatchInstanceGroupManagerRequest {
  string zone = 1;
  string instance_group_manager = 2;
  string project = 3;
  string request_id = 4;
  InstanceGroupManager instance_group_manager_resource = 5;
}

message RecreateInstancesInstanceGroupManagerRequest {
  string zone = 1;
  string instance_group_manager = 2;
  string project = 3;
  string request_id = 4;
  InstanceGroupManagersRecreateInstancesRequest instance_group_managers_recreate_instances_request_resource = 5;
}

message ResizeInstanceGroupManagerRequest {
  string zone = 1;
  string instance_group_manager = 2;
  string project = 3;
  int32 size = 4;
  string request_id = 5;
}

message SetInstanceTemplateInstanceGroupManagerRequest {
  string zone = 1;
  string instance_group_manager = 2;
  string project = 3;
  string request_id = 4;
  InstanceGroupManagersSetInstanceTemplateRequest instance_group_managers_set_instance_template_request_resource = 5;
}

message SetTargetPoolsInstanceGroupManagerRequest {
  string zone = 1;
  string instance_group_manager = 2;
  string project = 3;
  string request_id = 4;
  InstanceGroupManagersSetTargetPoolsRequest instance_group_managers_set_target_pools_request_resource = 5;
}

message AddInstancesInstanceGroupRequest {
  string zone = 1;
  string project = 2;
  string instance_group = 3;
  string request_id = 4;
  InstanceGroupsAddInstancesRequest instance_groups_add_instances_request_resource = 5;
}

message AggregatedListInstanceGroupsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteInstanceGroupRequest {
  string zone = 1;
  string project = 2;
  string instance_group = 3;
  string request_id = 4;
}

message GetInstanceGroupRequest {
  string zone = 1;
  string project = 2;
  string instance_group = 3;
}

message InsertInstanceGroupRequest {
  string zone = 1;
  string project = 2;
  string request_id = 3;
  InstanceGroup instance_group_resource = 4;
}

message ListInstanceGroupsRequest {
  string zone = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message ListInstancesInstanceGroupsRequest {
  string zone = 1;
  string project = 2;
  string instance_group = 3;
  string filter = 4;
  uint32 max_results = 5;
  string order_by = 6;
  string page_token = 7;
  InstanceGroupsListInstancesRequest instance_groups_list_instances_request_resource = 8;
}

message RemoveInstancesInstanceGroupRequest {
  string zone = 1;
  string project = 2;
  string instance_group = 3;
  string request_id = 4;
  InstanceGroupsRemoveInstancesRequest instance_groups_remove_instances_request_resource = 5;
}

message SetNamedPortsInstanceGroupRequest {
  string zone = 1;
  string project = 2;
  string instance_group = 3;
  string request_id = 4;
  InstanceGroupsSetNamedPortsRequest instance_groups_set_named_ports_request_resource = 5;
}

message DeleteInstanceTemplateRequest {
  string instance_template = 1;
  string project = 2;
  string request_id = 3;
}

message GetInstanceTemplateRequest {
  string instance_template = 1;
  string project = 2;
}

message GetIamPolicyInstanceTemplateRequest {
  string resource = 1;
  string project = 2;
}

message InsertInstanceTemplateRequest {
  string project = 1;
  string request_id = 2;
  InstanceTemplate instance_template_resource = 3;
}

message ListInstanceTemplatesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message SetIamPolicyInstanceTemplateRequest {
  string resource = 1;
  string project = 2;
  GlobalSetPolicyRequest global_set_policy_request_resource = 3;
}

message TestIamPermissionsInstanceTemplateRequest {
  string resource = 1;
  string project = 2;
  TestPermissionsRequest test_permissions_request_resource = 3;
}

message AddAccessConfigInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string network_interface = 4;
  string request_id = 5;
  AccessConfig access_config_resource = 6;
}

message AddResourcePoliciesInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  InstancesAddResourcePoliciesRequest instances_add_resource_policies_request_resource = 5;
}

message AggregatedListInstancesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AttachDiskInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  bool force_attach = 5;
  AttachedDisk attached_disk_resource = 6;
}

message DeleteInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
}

message DeleteAccessConfigInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string network_interface = 4;
  string request_id = 5;
  string access_config = 6;
}

message DetachDiskInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  string device_name = 5;
}

message GetInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
}

message GetGuestAttributesInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string query_path = 4;
  string variable_key = 5;
}

message GetIamPolicyInstanceRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
}

message GetSerialPortOutputInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  int32 port = 4;
  string start = 5;
}

message GetShieldedInstanceIdentityInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
}

message InsertInstanceRequest {
  string zone = 1;
  string project = 2;
  string source_instance_template = 3;
  string request_id = 4;
  Instance instance_resource = 5;
}

message ListInstancesRequest {
  string zone = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message ListReferrersInstancesRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string filter = 4;
  uint32 max_results = 5;
  string order_by = 6;
  string page_token = 7;
}

message RemoveResourcePoliciesInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  InstancesRemoveResourcePoliciesRequest instances_remove_resource_policies_request_resource = 5;
}

message ResetInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
}

message SetDeletionProtectionInstanceRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  bool deletion_protection = 5;
}

message SetDiskAutoDeleteInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  bool auto_delete = 5;
  string device_name = 6;
}

message SetIamPolicyInstanceRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
  ZoneSetPolicyRequest zone_set_policy_request_resource = 4;
}

message SetLabelsInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  InstancesSetLabelsRequest instances_set_labels_request_resource = 5;
}

message SetMachineResourcesInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  InstancesSetMachineResourcesRequest instances_set_machine_resources_request_resource = 5;
}

message SetMachineTypeInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  InstancesSetMachineTypeRequest instances_set_machine_type_request_resource = 5;
}

message SetMetadataInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  Metadata metadata_resource = 5;
}

message SetMinCpuPlatformInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  InstancesSetMinCpuPlatformRequest instances_set_min_cpu_platform_request_resource = 5;
}

message SetSchedulingInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  Scheduling scheduling_resource = 5;
}

message SetServiceAccountInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  InstancesSetServiceAccountRequest instances_set_service_account_request_resource = 5;
}

message SetShieldedInstanceIntegrityPolicyInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  ShieldedInstanceIntegrityPolicy shielded_instance_integrity_policy_resource = 5;
}

message SetTagsInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  Tags tags_resource = 5;
}

message SimulateMaintenanceEventInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
}

message StartInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
}

message StartWithEncryptionKeyInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  InstancesStartWithEncryptionKeyRequest instances_start_with_encryption_key_request_resource = 5;
}

message StopInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
}

message TestIamPermissionsInstanceRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
  TestPermissionsRequest test_permissions_request_resource = 4;
}

message UpdateInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string most_disruptive_allowed_action = 4;
  string minimal_action = 5;
  string request_id = 6;
  Instance instance_resource = 7;
}

message UpdateAccessConfigInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string network_interface = 4;
  string request_id = 5;
  AccessConfig access_config_resource = 6;
}

message UpdateDisplayDeviceInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  DisplayDevice display_device_resource = 5;
}

message UpdateNetworkInterfaceInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string network_interface = 4;
  string request_id = 5;
  NetworkInterface network_interface_resource = 6;
}

message UpdateShieldedInstanceConfigInstanceRequest {
  string instance = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  ShieldedInstanceConfig shielded_instance_config_resource = 5;
}

message AggregatedListInterconnectAttachmentsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteInterconnectAttachmentRequest {
  string project = 1;
  string interconnect_attachment = 2;
  string region = 3;
  string request_id = 4;
}

message GetInterconnectAttachmentRequest {
  string project = 1;
  string interconnect_attachment = 2;
  string region = 3;
}

message InsertInterconnectAttachmentRequest {
  string project = 1;
  string region = 2;
  bool validate_only = 3;
  string request_id = 4;
  InterconnectAttachment interconnect_attachment_resource = 5;
}

message ListInterconnectAttachmentsRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message PatchInterconnectAttachmentRequest {
  string project = 1;
  string interconnect_attachment = 2;
  string region = 3;
  string request_id = 4;
  InterconnectAttachment interconnect_attachment_resource = 5;
}

message GetInterconnectLocationRequest {
  string project = 1;
  string interconnect_location = 2;
}

message ListInterconnectLocationsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message DeleteInterconnectRequest {
  string project = 1;
  string interconnect = 2;
  string request_id = 3;
}

message GetInterconnectRequest {
  string project = 1;
  string interconnect = 2;
}

message GetDiagnosticsInterconnectRequest {
  string project = 1;
  string interconnect = 2;
}

message InsertInterconnectRequest {
  string project = 1;
  string request_id = 2;
  Interconnect interconnect_resource = 3;
}

message ListInterconnectsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message PatchInterconnectRequest {
  string project = 1;
  string interconnect = 2;
  string request_id = 3;
  Interconnect interconnect_resource = 4;
}

message GetLicenseCodeRequest {
  string project = 1;
  string license_code = 2;
}

message TestIamPermissionsLicenseCodeRequest {
  string resource = 1;
  string project = 2;
  TestPermissionsRequest test_permissions_request_resource = 3;
}

message DeleteLicenseRequest {
  string license = 1;
  string project = 2;
  string request_id = 3;
}

message GetLicenseRequest {
  string license = 1;
  string project = 2;
}

message GetIamPolicyLicenseRequest {
  string resource = 1;
  string project = 2;
}

message InsertLicenseRequest {
  string project = 1;
  string request_id = 2;
  License license_resource = 3;
}

message ListLicensesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message SetIamPolicyLicenseRequest {
  string resource = 1;
  string project = 2;
  GlobalSetPolicyRequest global_set_policy_request_resource = 3;
}

message TestIamPermissionsLicenseRequest {
  string resource = 1;
  string project = 2;
  TestPermissionsRequest test_permissions_request_resource = 3;
}

message AggregatedListMachineTypesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message GetMachineTypeRequest {
  string zone = 1;
  string project = 2;
  string machine_type = 3;
}

message ListMachineTypesRequest {
  string zone = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListNetworkEndpointGroupsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message AttachNetworkEndpointsNetworkEndpointGroupRequest {
  string network_endpoint_group = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  NetworkEndpointGroupsAttachEndpointsRequest network_endpoint_groups_attach_endpoints_request_resource = 5;
}

message DeleteNetworkEndpointGroupRequest {
  string network_endpoint_group = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
}

message DetachNetworkEndpointsNetworkEndpointGroupRequest {
  string network_endpoint_group = 1;
  string zone = 2;
  string project = 3;
  string request_id = 4;
  NetworkEndpointGroupsDetachEndpointsRequest network_endpoint_groups_detach_endpoints_request_resource = 5;
}

message GetNetworkEndpointGroupRequest {
  string network_endpoint_group = 1;
  string zone = 2;
  string project = 3;
}

message InsertNetworkEndpointGroupRequest {
  string zone = 1;
  string project = 2;
  string request_id = 3;
  NetworkEndpointGroup network_endpoint_group_resource = 4;
}

message ListNetworkEndpointGroupsRequest {
  string zone = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message ListNetworkEndpointsNetworkEndpointGroupsRequest {
  string network_endpoint_group = 1;
  string zone = 2;
  string project = 3;
  string filter = 4;
  uint32 max_results = 5;
  string order_by = 6;
  string page_token = 7;
  NetworkEndpointGroupsListEndpointsRequest network_endpoint_groups_list_endpoints_request_resource = 8;
}

message TestIamPermissionsNetworkEndpointGroupRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
  TestPermissionsRequest test_permissions_request_resource = 4;
}

message AddPeeringNetworkRequest {
  string project = 1;
  string network = 2;
  string request_id = 3;
  NetworksAddPeeringRequest networks_add_peering_request_resource = 4;
}

message DeleteNetworkRequest {
  string project = 1;
  string network = 2;
  string request_id = 3;
}

message GetNetworkRequest {
  string project = 1;
  string network = 2;
}

message InsertNetworkRequest {
  string project = 1;
  string request_id = 2;
  Network network_resource = 3;
}

message ListNetworksRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListPeeringRoutesNetworksRequest {
  enum Direction {
    INCOMING = 0;
    OUTGOING = 1;
  }

  string project = 1;
  string network = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string peering_name = 6;
  string page_token = 7;
  string region = 8;
  Direction direction = 9;
}

message PatchNetworkRequest {
  string project = 1;
  string network = 2;
  string request_id = 3;
  Network network_resource = 4;
}

message RemovePeeringNetworkRequest {
  string project = 1;
  string network = 2;
  string request_id = 3;
  NetworksRemovePeeringRequest networks_remove_peering_request_resource = 4;
}

message SwitchToCustomModeNetworkRequest {
  string project = 1;
  string network = 2;
  string request_id = 3;
}

message UpdatePeeringNetworkRequest {
  string project = 1;
  string network = 2;
  string request_id = 3;
  NetworksUpdatePeeringRequest networks_update_peering_request_resource = 4;
}

message AddNodesNodeGroupRequest {
  string zone = 1;
  string project = 2;
  string node_group = 3;
  string request_id = 4;
  NodeGroupsAddNodesRequest node_groups_add_nodes_request_resource = 5;
}

message AggregatedListNodeGroupsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteNodeGroupRequest {
  string zone = 1;
  string project = 2;
  string node_group = 3;
  string request_id = 4;
}

message DeleteNodesNodeGroupRequest {
  string zone = 1;
  string project = 2;
  string node_group = 3;
  string request_id = 4;
  NodeGroupsDeleteNodesRequest node_groups_delete_nodes_request_resource = 5;
}

message GetNodeGroupRequest {
  string zone = 1;
  string project = 2;
  string node_group = 3;
}

message GetIamPolicyNodeGroupRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
}

message InsertNodeGroupRequest {
  string zone = 1;
  string project = 2;
  int32 initial_node_count = 3;
  string request_id = 4;
  NodeGroup node_group_resource = 5;
}

message ListNodeGroupsRequest {
  string zone = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message ListNodesNodeGroupsRequest {
  string zone = 1;
  string project = 2;
  string node_group = 3;
  string filter = 4;
  uint32 max_results = 5;
  string order_by = 6;
  string page_token = 7;
}

message PatchNodeGroupRequest {
  string zone = 1;
  string project = 2;
  string node_group = 3;
  string request_id = 4;
  NodeGroup node_group_resource = 5;
}

message SetIamPolicyNodeGroupRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
  ZoneSetPolicyRequest zone_set_policy_request_resource = 4;
}

message SetNodeTemplateNodeGroupRequest {
  string zone = 1;
  string project = 2;
  string node_group = 3;
  string request_id = 4;
  NodeGroupsSetNodeTemplateRequest node_groups_set_node_template_request_resource = 5;
}

message TestIamPermissionsNodeGroupRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
  TestPermissionsRequest test_permissions_request_resource = 4;
}

message AggregatedListNodeTemplatesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteNodeTemplateRequest {
  string project = 1;
  string region = 2;
  string node_template = 3;
  string request_id = 4;
}

message GetNodeTemplateRequest {
  string project = 1;
  string region = 2;
  string node_template = 3;
}

message GetIamPolicyNodeTemplateRequest {
  string resource = 1;
  string project = 2;
  string region = 3;
}

message InsertNodeTemplateRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  NodeTemplate node_template_resource = 4;
}

message ListNodeTemplatesRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message SetIamPolicyNodeTemplateRequest {
  string resource = 1;
  string project = 2;
  string region = 3;
  RegionSetPolicyRequest region_set_policy_request_resource = 4;
}

message TestIamPermissionsNodeTemplateRequest {
  string resource = 1;
  string project = 2;
  string region = 3;
  TestPermissionsRequest test_permissions_request_resource = 4;
}

message AggregatedListNodeTypesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message GetNodeTypeRequest {
  string zone = 1;
  string project = 2;
  string node_type = 3;
}

message ListNodeTypesRequest {
  string zone = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListPacketMirroringsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeletePacketMirroringRequest {
  string project = 1;
  string region = 2;
  string packet_mirroring = 3;
  string request_id = 4;
}

message GetPacketMirroringRequest {
  string project = 1;
  string region = 2;
  string packet_mirroring = 3;
}

message InsertPacketMirroringRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  PacketMirroring packet_mirroring_resource = 4;
}

message ListPacketMirroringsRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message PatchPacketMirroringRequest {
  string project = 1;
  string region = 2;
  string packet_mirroring = 3;
  string request_id = 4;
  PacketMirroring packet_mirroring_resource = 5;
}

message TestIamPermissionsPacketMirroringRequest {
  string resource = 1;
  string project = 2;
  string region = 3;
  TestPermissionsRequest test_permissions_request_resource = 4;
}

message DisableXpnHostProjectRequest {
  string project = 1;
  string request_id = 2;
}

message DisableXpnResourceProjectRequest {
  string project = 1;
  string request_id = 2;
  ProjectsDisableXpnResourceRequest projects_disable_xpn_resource_request_resource = 3;
}

message EnableXpnHostProjectRequest {
  string project = 1;
  string request_id = 2;
}

message EnableXpnResourceProjectRequest {
  string project = 1;
  string request_id = 2;
  ProjectsEnableXpnResourceRequest projects_enable_xpn_resource_request_resource = 3;
}

message GetProjectRequest {
  string project = 1;
}

message GetXpnHostProjectRequest {
  string project = 1;
}

message GetXpnResourcesProjectsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListXpnHostsProjectsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
  ProjectsListXpnHostsRequest projects_list_xpn_hosts_request_resource = 6;
}

message MoveDiskProjectRequest {
  string project = 1;
  string request_id = 2;
  DiskMoveRequest disk_move_request_resource = 3;
}

message MoveInstanceProjectRequest {
  string project = 1;
  string request_id = 2;
  InstanceMoveRequest instance_move_request_resource = 3;
}

message SetCommonInstanceMetadataProjectRequest {
  string project = 1;
  string request_id = 2;
  Metadata metadata_resource = 3;
}

message SetDefaultNetworkTierProjectRequest {
  string project = 1;
  string request_id = 2;
  ProjectsSetDefaultNetworkTierRequest projects_set_default_network_tier_request_resource = 3;
}

message SetUsageExportBucketProjectRequest {
  string project = 1;
  string request_id = 2;
  UsageExportLocation usage_export_location_resource = 3;
}

message DeleteRegionAutoscalerRequest {
  string autoscaler = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
}

message GetRegionAutoscalerRequest {
  string autoscaler = 1;
  string project = 2;
  string region = 3;
}

message InsertRegionAutoscalerRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  Autoscaler autoscaler_resource = 4;
}

message ListRegionAutoscalersRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message PatchRegionAutoscalerRequest {
  string project = 1;
  string region = 2;
  string autoscaler = 3;
  string request_id = 4;
  Autoscaler autoscaler_resource = 5;
}

message UpdateRegionAutoscalerRequest {
  string project = 1;
  string region = 2;
  string autoscaler = 3;
  string request_id = 4;
  Autoscaler autoscaler_resource = 5;
}

message DeleteRegionBackendServiceRequest {
  string backend_service = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
}

message GetRegionBackendServiceRequest {
  string backend_service = 1;
  string project = 2;
  string region = 3;
}

message GetHealthRegionBackendServiceRequest {
  string backend_service = 1;
  string project = 2;
  string region = 3;
  ResourceGroupReference resource_group_reference_resource = 4;
}

message InsertRegionBackendServiceRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  BackendService backend_service_resource = 4;
}

message ListRegionBackendServicesRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message PatchRegionBackendServiceRequest {
  string backend_service = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  BackendService backend_service_resource = 5;
}

message UpdateRegionBackendServiceRequest {
  string backend_service = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  BackendService backend_service_resource = 5;
}

message AggregatedListRegionCommitmentsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message GetRegionCommitmentRequest {
  string commitment = 1;
  string project = 2;
  string region = 3;
}

message InsertRegionCommitmentRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  Commitment commitment_resource = 4;
}

message ListRegionCommitmentsRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message GetRegionDiskTypeRequest {
  string project = 1;
  string disk_type = 2;
  string region = 3;
}

message ListRegionDiskTypesRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message AddResourcePoliciesRegionDiskRequest {
  string disk = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  RegionDisksAddResourcePoliciesRequest region_disks_add_resource_policies_request_resource = 5;
}

message CreateSnapshotRegionDiskRequest {
  string disk = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  Snapshot snapshot_resource = 5;
}

message DeleteRegionDiskRequest {
  string disk = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
}

message GetRegionDiskRequest {
  string disk = 1;
  string project = 2;
  string region = 3;
}

message InsertRegionDiskRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  string source_image = 4;
  Disk disk_resource = 5;
}

message ListRegionDisksRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message RemoveResourcePoliciesRegionDiskRequest {
  string disk = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  RegionDisksRemoveResourcePoliciesRequest region_disks_remove_resource_policies_request_resource = 5;
}

message ResizeRegionDiskRequest {
  string disk = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  RegionDisksResizeRequest region_disks_resize_request_resource = 5;
}

message SetLabelsRegionDiskRequest {
  string resource = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  RegionSetLabelsRequest region_set_labels_request_resource = 5;
}

message TestIamPermissionsRegionDiskRequest {
  string resource = 1;
  string project = 2;
  string region = 3;
  TestPermissionsRequest test_permissions_request_resource = 4;
}

message DeleteRegionHealthCheckRequest {
  string health_check = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
}

message GetRegionHealthCheckRequest {
  string health_check = 1;
  string project = 2;
  string region = 3;
}

message InsertRegionHealthCheckRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  HealthCheck health_check_resource = 4;
}

message ListRegionHealthChecksRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message PatchRegionHealthCheckRequest {
  string health_check = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  HealthCheck health_check_resource = 5;
}

message UpdateRegionHealthCheckRequest {
  string health_check = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  HealthCheck health_check_resource = 5;
}

message AbandonInstancesRegionInstanceGroupManagerRequest {
  string instance_group_manager = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  RegionInstanceGroupManagersAbandonInstancesRequest region_instance_group_managers_abandon_instances_request_resource = 5;
}

message ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest {
  string instance_group_manager = 1;
  string project = 2;
  string region = 3;
  RegionInstanceGroupManagersApplyUpdatesRequest region_instance_group_managers_apply_updates_request_resource = 4;
}

message CreateInstancesRegionInstanceGroupManagerRequest {
  string instance_group_manager = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  RegionInstanceGroupManagersCreateInstancesRequest region_instance_group_managers_create_instances_request_resource = 5;
}

message DeleteRegionInstanceGroupManagerRequest {
  string instance_group_manager = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
}

message DeleteInstancesRegionInstanceGroupManagerRequest {
  string instance_group_manager = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  RegionInstanceGroupManagersDeleteInstancesRequest region_instance_group_managers_delete_instances_request_resource = 5;
}

message GetRegionInstanceGroupManagerRequest {
  string instance_group_manager = 1;
  string project = 2;
  string region = 3;
}

message InsertRegionInstanceGroupManagerRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  InstanceGroupManager instance_group_manager_resource = 4;
}

message ListRegionInstanceGroupManagersRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message ListErrorsRegionInstanceGroupManagersRequest {
  string instance_group_manager = 1;
  string project = 2;
  string region = 3;
  string filter = 4;
  uint32 max_results = 5;
  string order_by = 6;
  string page_token = 7;
}

message ListManagedInstancesRegionInstanceGroupManagersRequest {
  string instance_group_manager = 1;
  string project = 2;
  string region = 3;
  string filter = 4;
  uint32 max_results = 5;
  string order_by = 6;
  string page_token = 7;
}

message PatchRegionInstanceGroupManagerRequest {
  string instance_group_manager = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  InstanceGroupManager instance_group_manager_resource = 5;
}

message RecreateInstancesRegionInstanceGroupManagerRequest {
  string instance_group_manager = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  RegionInstanceGroupManagersRecreateRequest region_instance_group_managers_recreate_request_resource = 5;
}

message ResizeRegionInstanceGroupManagerRequest {
  string instance_group_manager = 1;
  string project = 2;
  string region = 3;
  int32 size = 4;
  string request_id = 5;
}

message SetInstanceTemplateRegionInstanceGroupManagerRequest {
  string instance_group_manager = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  RegionInstanceGroupManagersSetTemplateRequest region_instance_group_managers_set_template_request_resource = 5;
}

message SetTargetPoolsRegionInstanceGroupManagerRequest {
  string instance_group_manager = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  RegionInstanceGroupManagersSetTargetPoolsRequest region_instance_group_managers_set_target_pools_request_resource = 5;
}

message GetRegionInstanceGroupRequest {
  string project = 1;
  string instance_group = 2;
  string region = 3;
}

message ListRegionInstanceGroupsRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message ListInstancesRegionInstanceGroupsRequest {
  string project = 1;
  string instance_group = 2;
  string region = 3;
  string filter = 4;
  uint32 max_results = 5;
  string order_by = 6;
  string page_token = 7;
  RegionInstanceGroupsListInstancesRequest region_instance_groups_list_instances_request_resource = 8;
}

message SetNamedPortsRegionInstanceGroupRequest {
  string project = 1;
  string instance_group = 2;
  string region = 3;
  string request_id = 4;
  RegionInstanceGroupsSetNamedPortsRequest region_instance_groups_set_named_ports_request_resource = 5;
}

message DeleteRegionOperationRequest {
  string project = 1;
  string region = 2;
  string operation = 3;
}

message DeleteRegionOperationResponse {
}

message GetRegionOperationRequest {
  string project = 1;
  string region = 2;
  string operation = 3;
}

message ListRegionOperationsRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message WaitRegionOperationRequest {
  string project = 1;
  string region = 2;
  string operation = 3;
}

message DeleteRegionSslCertificateRequest {
  string ssl_certificate = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
}

message GetRegionSslCertificateRequest {
  string ssl_certificate = 1;
  string project = 2;
  string region = 3;
}

message InsertRegionSslCertificateRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  SslCertificate ssl_certificate_resource = 4;
}

message ListRegionSslCertificatesRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteRegionTargetHttpProxyRequest {
  string project = 1;
  string target_http_proxy = 2;
  string region = 3;
  string request_id = 4;
}

message GetRegionTargetHttpProxyRequest {
  string project = 1;
  string target_http_proxy = 2;
  string region = 3;
}

message InsertRegionTargetHttpProxyRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  TargetHttpProxy target_http_proxy_resource = 4;
}

message ListRegionTargetHttpProxiesRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message SetUrlMapRegionTargetHttpProxyRequest {
  string project = 1;
  string target_http_proxy = 2;
  string region = 3;
  string request_id = 4;
  UrlMapReference url_map_reference_resource = 5;
}

message DeleteRegionTargetHttpsProxyRequest {
  string target_https_proxy = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
}

message GetRegionTargetHttpsProxyRequest {
  string target_https_proxy = 1;
  string project = 2;
  string region = 3;
}

message InsertRegionTargetHttpsProxyRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  TargetHttpsProxy target_https_proxy_resource = 4;
}

message ListRegionTargetHttpsProxiesRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message SetSslCertificatesRegionTargetHttpsProxyRequest {
  string target_https_proxy = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  RegionTargetHttpsProxiesSetSslCertificatesRequest region_target_https_proxies_set_ssl_certificates_request_resource = 5;
}

message SetUrlMapRegionTargetHttpsProxyRequest {
  string target_https_proxy = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  UrlMapReference url_map_reference_resource = 5;
}

message DeleteRegionUrlMapRequest {
  string url_map = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
}

message GetRegionUrlMapRequest {
  string url_map = 1;
  string project = 2;
  string region = 3;
}

message InsertRegionUrlMapRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  UrlMap url_map_resource = 4;
}

message ListRegionUrlMapsRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message PatchRegionUrlMapRequest {
  string url_map = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  UrlMap url_map_resource = 5;
}

message UpdateRegionUrlMapRequest {
  string url_map = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  UrlMap url_map_resource = 5;
}

message ValidateRegionUrlMapRequest {
  string url_map = 1;
  string project = 2;
  string region = 3;
  RegionUrlMapsValidateRequest region_url_maps_validate_request_resource = 4;
}

message GetRegionRequest {
  string project = 1;
  string region = 2;
}

message ListRegionsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message AggregatedListReservationsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteReservationRequest {
  string zone = 1;
  string project = 2;
  string reservation = 3;
  string request_id = 4;
}

message GetReservationRequest {
  string zone = 1;
  string project = 2;
  string reservation = 3;
}

message GetIamPolicyReservationRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
}

message InsertReservationRequest {
  string zone = 1;
  string project = 2;
  string request_id = 3;
  Reservation reservation_resource = 4;
}

message ListReservationsRequest {
  string zone = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message ResizeReservationRequest {
  string zone = 1;
  string project = 2;
  string reservation = 3;
  string request_id = 4;
  ReservationsResizeRequest reservations_resize_request_resource = 5;
}

message SetIamPolicyReservationRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
  ZoneSetPolicyRequest zone_set_policy_request_resource = 4;
}

message TestIamPermissionsReservationRequest {
  string resource = 1;
  string zone = 2;
  string project = 3;
  TestPermissionsRequest test_permissions_request_resource = 4;
}

message AggregatedListResourcePoliciesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteResourcePolicyRequest {
  string resource_policy = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
}

message GetResourcePolicyRequest {
  string resource_policy = 1;
  string project = 2;
  string region = 3;
}

message GetIamPolicyResourcePolicyRequest {
  string resource = 1;
  string project = 2;
  string region = 3;
}

message InsertResourcePolicyRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  ResourcePolicy resource_policy_resource = 4;
}

message ListResourcePoliciesRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message SetIamPolicyResourcePolicyRequest {
  string resource = 1;
  string project = 2;
  string region = 3;
  RegionSetPolicyRequest region_set_policy_request_resource = 4;
}

message TestIamPermissionsResourcePolicyRequest {
  string resource = 1;
  string project = 2;
  string region = 3;
  TestPermissionsRequest test_permissions_request_resource = 4;
}

message AggregatedListRoutersRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteRouterRequest {
  string router = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
}

message GetRouterRequest {
  string router = 1;
  string project = 2;
  string region = 3;
}

message GetNatMappingInfoRoutersRequest {
  string router = 1;
  string project = 2;
  string region = 3;
  string filter = 4;
  uint32 max_results = 5;
  string order_by = 6;
  string page_token = 7;
}

message GetRouterStatusRouterRequest {
  string router = 1;
  string project = 2;
  string region = 3;
}

message InsertRouterRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  Router router_resource = 4;
}

message ListRoutersRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message PatchRouterRequest {
  string router = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  Router router_resource = 5;
}

message PreviewRouterRequest {
  string router = 1;
  string project = 2;
  string region = 3;
  Router router_resource = 4;
}

message UpdateRouterRequest {
  string router = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  Router router_resource = 5;
}

message DeleteRouteRequest {
  string route = 1;
  string project = 2;
  string request_id = 3;
}

message GetRouteRequest {
  string route = 1;
  string project = 2;
}

message InsertRouteRequest {
  string project = 1;
  string request_id = 2;
  Route route_resource = 3;
}

message ListRoutesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message AddRuleSecurityPolicyRequest {
  string project = 1;
  string security_policy = 2;
  SecurityPolicyRule security_policy_rule_resource = 3;
}

message DeleteSecurityPolicyRequest {
  string project = 1;
  string security_policy = 2;
  string request_id = 3;
}

message GetSecurityPolicyRequest {
  string project = 1;
  string security_policy = 2;
}

message GetRuleSecurityPolicyRequest {
  string project = 1;
  string security_policy = 2;
  int32 priority = 3;
}

message InsertSecurityPolicyRequest {
  string project = 1;
  string request_id = 2;
  SecurityPolicy security_policy_resource = 3;
}

message ListSecurityPoliciesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message PatchSecurityPolicyRequest {
  string project = 1;
  string security_policy = 2;
  string request_id = 3;
  SecurityPolicy security_policy_resource = 4;
}

message PatchRuleSecurityPolicyRequest {
  string project = 1;
  string security_policy = 2;
  int32 priority = 3;
  SecurityPolicyRule security_policy_rule_resource = 4;
}

message RemoveRuleSecurityPolicyRequest {
  string project = 1;
  string security_policy = 2;
  int32 priority = 3;
}

message DeleteSnapshotRequest {
  string project = 1;
  string snapshot = 2;
  string request_id = 3;
}

message GetSnapshotRequest {
  string project = 1;
  string snapshot = 2;
}

message GetIamPolicySnapshotRequest {
  string resource = 1;
  string project = 2;
}

message ListSnapshotsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message SetIamPolicySnapshotRequest {
  string resource = 1;
  string project = 2;
  GlobalSetPolicyRequest global_set_policy_request_resource = 3;
}

message SetLabelsSnapshotRequest {
  string resource = 1;
  string project = 2;
  GlobalSetLabelsRequest global_set_labels_request_resource = 3;
}

message TestIamPermissionsSnapshotRequest {
  string resource = 1;
  string project = 2;
  TestPermissionsRequest test_permissions_request_resource = 3;
}

message AggregatedListSslCertificatesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteSslCertificateRequest {
  string ssl_certificate = 1;
  string project = 2;
  string request_id = 3;
}

message GetSslCertificateRequest {
  string ssl_certificate = 1;
  string project = 2;
}

message InsertSslCertificateRequest {
  string project = 1;
  string request_id = 2;
  SslCertificate ssl_certificate_resource = 3;
}

message ListSslCertificatesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message DeleteSslPolicyRequest {
  string ssl_policy = 1;
  string project = 2;
  string request_id = 3;
}

message GetSslPolicyRequest {
  string ssl_policy = 1;
  string project = 2;
}

message InsertSslPolicyRequest {
  string project = 1;
  string request_id = 2;
  SslPolicy ssl_policy_resource = 3;
}

message ListSslPoliciesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message ListAvailableFeaturesSslPoliciesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message PatchSslPolicyRequest {
  string ssl_policy = 1;
  string project = 2;
  string request_id = 3;
  SslPolicy ssl_policy_resource = 4;
}

message AggregatedListSubnetworksRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteSubnetworkRequest {
  string subnetwork = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
}

message ExpandIpCidrRangeSubnetworkRequest {
  string subnetwork = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  SubnetworksExpandIpCidrRangeRequest subnetworks_expand_ip_cidr_range_request_resource = 5;
}

message GetSubnetworkRequest {
  string subnetwork = 1;
  string project = 2;
  string region = 3;
}

message GetIamPolicySubnetworkRequest {
  string resource = 1;
  string project = 2;
  string region = 3;
}

message InsertSubnetworkRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  Subnetwork subnetwork_resource = 4;
}

message ListSubnetworksRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message ListUsableSubnetworksRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message PatchSubnetworkRequest {
  string subnetwork = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  int32 drain_timeout_seconds = 5;
  Subnetwork subnetwork_resource = 6;
}

message SetIamPolicySubnetworkRequest {
  string resource = 1;
  string project = 2;
  string region = 3;
  RegionSetPolicyRequest region_set_policy_request_resource = 4;
}

message SetPrivateIpGoogleAccessSubnetworkRequest {
  string subnetwork = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  SubnetworksSetPrivateIpGoogleAccessRequest subnetworks_set_private_ip_google_access_request_resource = 5;
}

message TestIamPermissionsSubnetworkRequest {
  string resource = 1;
  string project = 2;
  string region = 3;
  TestPermissionsRequest test_permissions_request_resource = 4;
}

message AggregatedListTargetHttpProxiesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteTargetHttpProxyRequest {
  string project = 1;
  string target_http_proxy = 2;
  string request_id = 3;
}

message GetTargetHttpProxyRequest {
  string project = 1;
  string target_http_proxy = 2;
}

message InsertTargetHttpProxyRequest {
  string project = 1;
  string request_id = 2;
  TargetHttpProxy target_http_proxy_resource = 3;
}

message ListTargetHttpProxiesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message SetUrlMapTargetHttpProxyRequest {
  string project = 1;
  string target_http_proxy = 2;
  string request_id = 3;
  UrlMapReference url_map_reference_resource = 4;
}

message AggregatedListTargetHttpsProxiesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteTargetHttpsProxyRequest {
  string target_https_proxy = 1;
  string project = 2;
  string request_id = 3;
}

message GetTargetHttpsProxyRequest {
  string target_https_proxy = 1;
  string project = 2;
}

message InsertTargetHttpsProxyRequest {
  string project = 1;
  string request_id = 2;
  TargetHttpsProxy target_https_proxy_resource = 3;
}

message ListTargetHttpsProxiesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message SetQuicOverrideTargetHttpsProxyRequest {
  string target_https_proxy = 1;
  string project = 2;
  string request_id = 3;
  TargetHttpsProxiesSetQuicOverrideRequest target_https_proxies_set_quic_override_request_resource = 4;
}

message SetSslCertificatesTargetHttpsProxyRequest {
  string target_https_proxy = 1;
  string project = 2;
  string request_id = 3;
  TargetHttpsProxiesSetSslCertificatesRequest target_https_proxies_set_ssl_certificates_request_resource = 4;
}

message SetSslPolicyTargetHttpsProxyRequest {
  string target_https_proxy = 1;
  string project = 2;
  string request_id = 3;
  SslPolicyReference ssl_policy_reference_resource = 4;
}

message SetUrlMapTargetHttpsProxyRequest {
  string target_https_proxy = 1;
  string project = 2;
  string request_id = 3;
  UrlMapReference url_map_reference_resource = 4;
}

message AggregatedListTargetInstancesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteTargetInstanceRequest {
  string zone = 1;
  string target_instance = 2;
  string project = 3;
  string request_id = 4;
}

message GetTargetInstanceRequest {
  string zone = 1;
  string target_instance = 2;
  string project = 3;
}

message InsertTargetInstanceRequest {
  string zone = 1;
  string project = 2;
  string request_id = 3;
  TargetInstance target_instance_resource = 4;
}

message ListTargetInstancesRequest {
  string zone = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message AddHealthCheckTargetPoolRequest {
  string target_pool = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  TargetPoolsAddHealthCheckRequest target_pools_add_health_check_request_resource = 5;
}

message AddInstanceTargetPoolRequest {
  string target_pool = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  TargetPoolsAddInstanceRequest target_pools_add_instance_request_resource = 5;
}

message AggregatedListTargetPoolsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteTargetPoolRequest {
  string target_pool = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
}

message GetTargetPoolRequest {
  string target_pool = 1;
  string project = 2;
  string region = 3;
}

message GetHealthTargetPoolRequest {
  string target_pool = 1;
  string project = 2;
  string region = 3;
  InstanceReference instance_reference_resource = 4;
}

message InsertTargetPoolRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  TargetPool target_pool_resource = 4;
}

message ListTargetPoolsRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message RemoveHealthCheckTargetPoolRequest {
  string target_pool = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  TargetPoolsRemoveHealthCheckRequest target_pools_remove_health_check_request_resource = 5;
}

message RemoveInstanceTargetPoolRequest {
  string target_pool = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  TargetPoolsRemoveInstanceRequest target_pools_remove_instance_request_resource = 5;
}

message SetBackupTargetPoolRequest {
  string target_pool = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  float failover_ratio = 5;
  TargetReference target_reference_resource = 6;
}

message DeleteTargetSslProxyRequest {
  string target_ssl_proxy = 1;
  string project = 2;
  string request_id = 3;
}

message GetTargetSslProxyRequest {
  string target_ssl_proxy = 1;
  string project = 2;
}

message InsertTargetSslProxyRequest {
  string project = 1;
  string request_id = 2;
  TargetSslProxy target_ssl_proxy_resource = 3;
}

message ListTargetSslProxiesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message SetBackendServiceTargetSslProxyRequest {
  string target_ssl_proxy = 1;
  string project = 2;
  string request_id = 3;
  TargetSslProxiesSetBackendServiceRequest target_ssl_proxies_set_backend_service_request_resource = 4;
}

message SetProxyHeaderTargetSslProxyRequest {
  string target_ssl_proxy = 1;
  string project = 2;
  string request_id = 3;
  TargetSslProxiesSetProxyHeaderRequest target_ssl_proxies_set_proxy_header_request_resource = 4;
}

message SetSslCertificatesTargetSslProxyRequest {
  string target_ssl_proxy = 1;
  string project = 2;
  string request_id = 3;
  TargetSslProxiesSetSslCertificatesRequest target_ssl_proxies_set_ssl_certificates_request_resource = 4;
}

message SetSslPolicyTargetSslProxyRequest {
  string target_ssl_proxy = 1;
  string project = 2;
  string request_id = 3;
  SslPolicyReference ssl_policy_reference_resource = 4;
}

message DeleteTargetTcpProxyRequest {
  string project = 1;
  string target_tcp_proxy = 2;
  string request_id = 3;
}

message GetTargetTcpProxyRequest {
  string project = 1;
  string target_tcp_proxy = 2;
}

message InsertTargetTcpProxyRequest {
  string project = 1;
  string request_id = 2;
  TargetTcpProxy target_tcp_proxy_resource = 3;
}

message ListTargetTcpProxiesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message SetBackendServiceTargetTcpProxyRequest {
  string project = 1;
  string target_tcp_proxy = 2;
  string request_id = 3;
  TargetTcpProxiesSetBackendServiceRequest target_tcp_proxies_set_backend_service_request_resource = 4;
}

message SetProxyHeaderTargetTcpProxyRequest {
  string project = 1;
  string target_tcp_proxy = 2;
  string request_id = 3;
  TargetTcpProxiesSetProxyHeaderRequest target_tcp_proxies_set_proxy_header_request_resource = 4;
}

message AggregatedListTargetVpnGatewaysRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteTargetVpnGatewayRequest {
  string project = 1;
  string region = 2;
  string target_vpn_gateway = 3;
  string request_id = 4;
}

message GetTargetVpnGatewayRequest {
  string project = 1;
  string region = 2;
  string target_vpn_gateway = 3;
}

message InsertTargetVpnGatewayRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  TargetVpnGateway target_vpn_gateway_resource = 4;
}

message ListTargetVpnGatewaysRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message AggregatedListUrlMapsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteUrlMapRequest {
  string url_map = 1;
  string project = 2;
  string request_id = 3;
}

message GetUrlMapRequest {
  string url_map = 1;
  string project = 2;
}

message InsertUrlMapRequest {
  string project = 1;
  string request_id = 2;
  UrlMap url_map_resource = 3;
}

message InvalidateCacheUrlMapRequest {
  string url_map = 1;
  string project = 2;
  string request_id = 3;
  CacheInvalidationRule cache_invalidation_rule_resource = 4;
}

message ListUrlMapsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

message PatchUrlMapRequest {
  string url_map = 1;
  string project = 2;
  string request_id = 3;
  UrlMap url_map_resource = 4;
}

message UpdateUrlMapRequest {
  string url_map = 1;
  string project = 2;
  string request_id = 3;
  UrlMap url_map_resource = 4;
}

message ValidateUrlMapRequest {
  string url_map = 1;
  string project = 2;
  UrlMapsValidateRequest url_maps_validate_request_resource = 3;
}

message AggregatedListVpnGatewaysRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteVpnGatewayRequest {
  string project = 1;
  string region = 2;
  string vpn_gateway = 3;
  string request_id = 4;
}

message GetVpnGatewayRequest {
  string project = 1;
  string region = 2;
  string vpn_gateway = 3;
}

message GetStatusVpnGatewayRequest {
  string project = 1;
  string region = 2;
  string vpn_gateway = 3;
}

message InsertVpnGatewayRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  VpnGateway vpn_gateway_resource = 4;
}

message ListVpnGatewaysRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message SetLabelsVpnGatewayRequest {
  string resource = 1;
  string project = 2;
  string region = 3;
  string request_id = 4;
  RegionSetLabelsRequest region_set_labels_request_resource = 5;
}

message TestIamPermissionsVpnGatewayRequest {
  string resource = 1;
  string project = 2;
  string region = 3;
  TestPermissionsRequest test_permissions_request_resource = 4;
}

message AggregatedListVpnTunnelsRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  bool include_all_scopes = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteVpnTunnelRequest {
  string project = 1;
  string vpn_tunnel = 2;
  string region = 3;
  string request_id = 4;
}

message GetVpnTunnelRequest {
  string project = 1;
  string vpn_tunnel = 2;
  string region = 3;
}

message InsertVpnTunnelRequest {
  string project = 1;
  string region = 2;
  string request_id = 3;
  VpnTunnel vpn_tunnel_resource = 4;
}

message ListVpnTunnelsRequest {
  string project = 1;
  string region = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message DeleteZoneOperationRequest {
  string zone = 1;
  string project = 2;
  string operation = 3;
}

message DeleteZoneOperationResponse {
}

message GetZoneOperationRequest {
  string zone = 1;
  string project = 2;
  string operation = 3;
}

message ListZoneOperationsRequest {
  string zone = 1;
  string project = 2;
  string filter = 3;
  uint32 max_results = 4;
  string order_by = 5;
  string page_token = 6;
}

message WaitZoneOperationRequest {
  string zone = 1;
  string project = 2;
  string operation = 3;
}

message GetZoneRequest {
  string zone = 1;
  string project = 2;
}

message ListZonesRequest {
  string project = 1;
  string filter = 2;
  uint32 max_results = 3;
  string order_by = 4;
  string page_token = 5;
}

//
// Services
//
service AcceleratorTypes {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute.readonly,"
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListAcceleratorTypesRequest) returns (AcceleratorTypeAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/acceleratorTypes"
    };
  }

  rpc Get(GetAcceleratorTypeRequest) returns (AcceleratorType) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/acceleratorTypes/{accelerator_type}"
    };
  }

  rpc List(ListAcceleratorTypesRequest) returns (AcceleratorTypeList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/acceleratorTypes"
    };
  }

}

service Addresses {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListAddressesRequest) returns (AddressAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/addresses"
    };
  }

  rpc Delete(DeleteAddressRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/addresses/{address}"
    };
  }

  rpc Get(GetAddressRequest) returns (Address) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/addresses/{address}"
    };
  }

  rpc Insert(InsertAddressRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/addresses"
      body: "address_resource"
    };
  }

  rpc List(ListAddressesRequest) returns (AddressList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/addresses"
    };
  }

}

service Autoscalers {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListAutoscalersRequest) returns (AutoscalerAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/autoscalers"
    };
  }

  rpc Delete(DeleteAutoscalerRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/zones/{zone}/autoscalers/{autoscaler}"
    };
  }

  rpc Get(GetAutoscalerRequest) returns (Autoscaler) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/autoscalers/{autoscaler}"
    };
  }

  rpc Insert(InsertAutoscalerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/autoscalers"
      body: "autoscaler_resource"
    };
  }

  rpc List(ListAutoscalersRequest) returns (AutoscalerList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/autoscalers"
    };
  }

  rpc Patch(PatchAutoscalerRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/zones/{zone}/autoscalers"
      body: "autoscaler_resource"
    };
  }

  rpc Update(UpdateAutoscalerRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/zones/{zone}/autoscalers"
      body: "autoscaler_resource"
    };
  }

}

service BackendBuckets {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AddSignedUrlKey(AddSignedUrlKeyBackendBucketRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendBuckets/{backend_bucket}/addSignedUrlKey"
      body: "signed_url_key_resource"
    };
  }

  rpc Delete(DeleteBackendBucketRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/backendBuckets/{backend_bucket}"
    };
  }

  rpc DeleteSignedUrlKey(DeleteSignedUrlKeyBackendBucketRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendBuckets/{backend_bucket}/deleteSignedUrlKey"
    };
  }

  rpc Get(GetBackendBucketRequest) returns (BackendBucket) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/backendBuckets/{backend_bucket}"
    };
  }

  rpc Insert(InsertBackendBucketRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendBuckets"
      body: "backend_bucket_resource"
    };
  }

  rpc List(ListBackendBucketsRequest) returns (BackendBucketList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/backendBuckets"
    };
  }

  rpc Patch(PatchBackendBucketRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/global/backendBuckets/{backend_bucket}"
      body: "backend_bucket_resource"
    };
  }

  rpc Update(UpdateBackendBucketRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/global/backendBuckets/{backend_bucket}"
      body: "backend_bucket_resource"
    };
  }

}

service BackendServices {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AddSignedUrlKey(AddSignedUrlKeyBackendServiceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendServices/{backend_service}/addSignedUrlKey"
      body: "signed_url_key_resource"
    };
  }

  rpc AggregatedList(AggregatedListBackendServicesRequest) returns (BackendServiceAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/backendServices"
    };
  }

  rpc Delete(DeleteBackendServiceRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/backendServices/{backend_service}"
    };
  }

  rpc DeleteSignedUrlKey(DeleteSignedUrlKeyBackendServiceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendServices/{backend_service}/deleteSignedUrlKey"
    };
  }

  rpc Get(GetBackendServiceRequest) returns (BackendService) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/backendServices/{backend_service}"
    };
  }

  rpc GetHealth(GetHealthBackendServiceRequest) returns (BackendServiceGroupHealth) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendServices/{backend_service}/getHealth"
      body: "resource_group_reference_resource"
    };
  }

  rpc Insert(InsertBackendServiceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendServices"
      body: "backend_service_resource"
    };
  }

  rpc List(ListBackendServicesRequest) returns (BackendServiceList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/backendServices"
    };
  }

  rpc Patch(PatchBackendServiceRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/global/backendServices/{backend_service}"
      body: "backend_service_resource"
    };
  }

  rpc SetSecurityPolicy(SetSecurityPolicyBackendServiceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/backendServices/{backend_service}/setSecurityPolicy"
      body: "security_policy_reference_resource"
    };
  }

  rpc Update(UpdateBackendServiceRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/global/backendServices/{backend_service}"
      body: "backend_service_resource"
    };
  }

}

service DiskTypes {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute.readonly,"
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListDiskTypesRequest) returns (DiskTypeAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/diskTypes"
    };
  }

  rpc Get(GetDiskTypeRequest) returns (DiskType) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/diskTypes/{disk_type}"
    };
  }

  rpc List(ListDiskTypesRequest) returns (DiskTypeList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/diskTypes"
    };
  }

}

service Disks {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AddResourcePolicies(AddResourcePoliciesDiskRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies"
      body: "disks_add_resource_policies_request_resource"
    };
  }

  rpc AggregatedList(AggregatedListDisksRequest) returns (DiskAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/disks"
    };
  }

  rpc CreateSnapshot(CreateSnapshotDiskRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot"
      body: "snapshot_resource"
    };
  }

  rpc Delete(DeleteDiskRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/zones/{zone}/disks/{disk}"
    };
  }

  rpc Get(GetDiskRequest) returns (Disk) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/disks/{disk}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyDiskRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertDiskRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/disks"
      body: "disk_resource"
    };
  }

  rpc List(ListDisksRequest) returns (DiskList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/disks"
    };
  }

  rpc RemoveResourcePolicies(RemoveResourcePoliciesDiskRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies"
      body: "disks_remove_resource_policies_request_resource"
    };
  }

  rpc Resize(ResizeDiskRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/disks/{disk}/resize"
      body: "disks_resize_request_resource"
    };
  }

  rpc SetIamPolicy(SetIamPolicyDiskRequest) returns (Policy) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy"
      body: "zone_set_policy_request_resource"
    };
  }

  rpc SetLabels(SetLabelsDiskRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/setLabels"
      body: "zone_set_labels_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsDiskRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service ExternalVpnGateways {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteExternalVpnGatewayRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/externalVpnGateways/{external_vpn_gateway}"
    };
  }

  rpc Get(GetExternalVpnGatewayRequest) returns (ExternalVpnGateway) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/externalVpnGateways/{external_vpn_gateway}"
    };
  }

  rpc Insert(InsertExternalVpnGatewayRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/externalVpnGateways"
      body: "external_vpn_gateway_resource"
    };
  }

  rpc List(ListExternalVpnGatewaysRequest) returns (ExternalVpnGatewayList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/externalVpnGateways"
    };
  }

  rpc SetLabels(SetLabelsExternalVpnGatewayRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/externalVpnGateways/{resource}/setLabels"
      body: "global_set_labels_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsExternalVpnGatewayRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service Firewalls {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteFirewallRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/firewalls/{firewall}"
    };
  }

  rpc Get(GetFirewallRequest) returns (Firewall) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/firewalls/{firewall}"
    };
  }

  rpc Insert(InsertFirewallRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/firewalls"
      body: "firewall_resource"
    };
  }

  rpc List(ListFirewallsRequest) returns (FirewallList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/firewalls"
    };
  }

  rpc Patch(PatchFirewallRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/global/firewalls/{firewall}"
      body: "firewall_resource"
    };
  }

  rpc Update(UpdateFirewallRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/global/firewalls/{firewall}"
      body: "firewall_resource"
    };
  }

}

service ForwardingRules {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListForwardingRulesRequest) returns (ForwardingRuleAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/forwardingRules"
    };
  }

  rpc Delete(DeleteForwardingRuleRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwarding_rule}"
    };
  }

  rpc Get(GetForwardingRuleRequest) returns (ForwardingRule) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwarding_rule}"
    };
  }

  rpc Insert(InsertForwardingRuleRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/forwardingRules"
      body: "forwarding_rule_resource"
    };
  }

  rpc List(ListForwardingRulesRequest) returns (ForwardingRuleList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/forwardingRules"
    };
  }

  rpc Patch(PatchForwardingRuleRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwarding_rule}"
      body: "forwarding_rule_resource"
    };
  }

  rpc SetTarget(SetTargetForwardingRuleRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwarding_rule}/setTarget"
      body: "target_reference_resource"
    };
  }

}

service GlobalAddresses {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteGlobalAddressRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/addresses/{address}"
    };
  }

  rpc Get(GetGlobalAddressRequest) returns (Address) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/addresses/{address}"
    };
  }

  rpc Insert(InsertGlobalAddressRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/addresses"
      body: "address_resource"
    };
  }

  rpc List(ListGlobalAddressesRequest) returns (AddressList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/addresses"
    };
  }

}

service GlobalForwardingRules {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteGlobalForwardingRuleRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/forwardingRules/{forwarding_rule}"
    };
  }

  rpc Get(GetGlobalForwardingRuleRequest) returns (ForwardingRule) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/forwardingRules/{forwarding_rule}"
    };
  }

  rpc Insert(InsertGlobalForwardingRuleRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/forwardingRules"
      body: "forwarding_rule_resource"
    };
  }

  rpc List(ListGlobalForwardingRulesRequest) returns (ForwardingRuleList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/forwardingRules"
    };
  }

  rpc Patch(PatchGlobalForwardingRuleRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/global/forwardingRules/{forwarding_rule}"
      body: "forwarding_rule_resource"
    };
  }

  rpc SetTarget(SetTargetGlobalForwardingRuleRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/forwardingRules/{forwarding_rule}/setTarget"
      body: "target_reference_resource"
    };
  }

}

service GlobalNetworkEndpointGroups {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AttachNetworkEndpoints(AttachNetworkEndpointsGlobalNetworkEndpointGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/networkEndpointGroups/{network_endpoint_group}/attachNetworkEndpoints"
      body: "global_network_endpoint_groups_attach_endpoints_request_resource"
    };
  }

  rpc Delete(DeleteGlobalNetworkEndpointGroupRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/networkEndpointGroups/{network_endpoint_group}"
    };
  }

  rpc DetachNetworkEndpoints(DetachNetworkEndpointsGlobalNetworkEndpointGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/networkEndpointGroups/{network_endpoint_group}/detachNetworkEndpoints"
      body: "global_network_endpoint_groups_detach_endpoints_request_resource"
    };
  }

  rpc Get(GetGlobalNetworkEndpointGroupRequest) returns (NetworkEndpointGroup) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/networkEndpointGroups/{network_endpoint_group}"
    };
  }

  rpc Insert(InsertGlobalNetworkEndpointGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/networkEndpointGroups"
      body: "network_endpoint_group_resource"
    };
  }

  rpc List(ListGlobalNetworkEndpointGroupsRequest) returns (NetworkEndpointGroupList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/networkEndpointGroups"
    };
  }

  rpc ListNetworkEndpoints(ListNetworkEndpointsGlobalNetworkEndpointGroupsRequest) returns (NetworkEndpointGroupsListNetworkEndpoints) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/networkEndpointGroups/{network_endpoint_group}/listNetworkEndpoints"
    };
  }

}

service GlobalOperations {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListGlobalOperationsRequest) returns (OperationAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/operations"
    };
  }

  rpc Delete(DeleteGlobalOperationRequest) returns (DeleteGlobalOperationResponse) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/operations/{operation}"
    };
  }

  rpc Get(GetGlobalOperationRequest) returns (Operation) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/operations/{operation}"
    };
  }

  rpc List(ListGlobalOperationsRequest) returns (OperationList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/operations"
    };
  }

  rpc Wait(WaitGlobalOperationRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/operations/{operation}/wait"
    };
  }

}

service HealthChecks {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListHealthChecksRequest) returns (HealthChecksAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/healthChecks"
    };
  }

  rpc Delete(DeleteHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/healthChecks/{health_check}"
    };
  }

  rpc Get(GetHealthCheckRequest) returns (HealthCheck) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/healthChecks/{health_check}"
    };
  }

  rpc Insert(InsertHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/healthChecks"
      body: "health_check_resource"
    };
  }

  rpc List(ListHealthChecksRequest) returns (HealthCheckList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/healthChecks"
    };
  }

  rpc Patch(PatchHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/global/healthChecks/{health_check}"
      body: "health_check_resource"
    };
  }

  rpc Update(UpdateHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/global/healthChecks/{health_check}"
      body: "health_check_resource"
    };
  }

}

service HttpHealthChecks {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteHttpHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/httpHealthChecks/{http_health_check}"
    };
  }

  rpc Get(GetHttpHealthCheckRequest) returns (HttpHealthCheck) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/httpHealthChecks/{http_health_check}"
    };
  }

  rpc Insert(InsertHttpHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/httpHealthChecks"
      body: "http_health_check_resource"
    };
  }

  rpc List(ListHttpHealthChecksRequest) returns (HttpHealthCheckList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/httpHealthChecks"
    };
  }

  rpc Patch(PatchHttpHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/global/httpHealthChecks/{http_health_check}"
      body: "http_health_check_resource"
    };
  }

  rpc Update(UpdateHttpHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/global/httpHealthChecks/{http_health_check}"
      body: "http_health_check_resource"
    };
  }

}

service HttpsHealthChecks {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteHttpsHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/httpsHealthChecks/{https_health_check}"
    };
  }

  rpc Get(GetHttpsHealthCheckRequest) returns (HttpsHealthCheck) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/httpsHealthChecks/{https_health_check}"
    };
  }

  rpc Insert(InsertHttpsHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/httpsHealthChecks"
      body: "https_health_check_resource"
    };
  }

  rpc List(ListHttpsHealthChecksRequest) returns (HttpsHealthCheckList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/httpsHealthChecks"
    };
  }

  rpc Patch(PatchHttpsHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/global/httpsHealthChecks/{https_health_check}"
      body: "https_health_check_resource"
    };
  }

  rpc Update(UpdateHttpsHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/global/httpsHealthChecks/{https_health_check}"
      body: "https_health_check_resource"
    };
  }

}

service Images {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteImageRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/images/{image}"
    };
  }

  rpc Deprecate(DeprecateImageRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/images/{image}/deprecate"
      body: "deprecation_status_resource"
    };
  }

  rpc Get(GetImageRequest) returns (Image) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/images/{image}"
    };
  }

  rpc GetFromFamily(GetFromFamilyImageRequest) returns (Image) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/images/family/{family}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyImageRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/images/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertImageRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/images"
      body: "image_resource"
    };
  }

  rpc List(ListImagesRequest) returns (ImageList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/images"
    };
  }

  rpc SetIamPolicy(SetIamPolicyImageRequest) returns (Policy) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/images/{resource}/setIamPolicy"
      body: "global_set_policy_request_resource"
    };
  }

  rpc SetLabels(SetLabelsImageRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/images/{resource}/setLabels"
      body: "global_set_labels_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsImageRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/images/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service InstanceGroupManagers {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AbandonInstances(AbandonInstancesInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/abandonInstances"
      body: "instance_group_managers_abandon_instances_request_resource"
    };
  }

  rpc AggregatedList(AggregatedListInstanceGroupManagersRequest) returns (InstanceGroupManagerAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/instanceGroupManagers"
    };
  }

  rpc ApplyUpdatesToInstances(ApplyUpdatesToInstancesInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/applyUpdatesToInstances"
      body: "instance_group_managers_apply_updates_request_resource"
    };
  }

  rpc CreateInstances(CreateInstancesInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/createInstances"
      body: "instance_group_managers_create_instances_request_resource"
    };
  }

  rpc Delete(DeleteInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}"
    };
  }

  rpc DeleteInstances(DeleteInstancesInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/deleteInstances"
      body: "instance_group_managers_delete_instances_request_resource"
    };
  }

  rpc Get(GetInstanceGroupManagerRequest) returns (InstanceGroupManager) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}"
    };
  }

  rpc Insert(InsertInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers"
      body: "instance_group_manager_resource"
    };
  }

  rpc List(ListInstanceGroupManagersRequest) returns (InstanceGroupManagerList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers"
    };
  }

  rpc ListErrors(ListErrorsInstanceGroupManagersRequest) returns (InstanceGroupManagersListErrorsResponse) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/listErrors"
    };
  }

  rpc ListManagedInstances(ListManagedInstancesInstanceGroupManagersRequest) returns (InstanceGroupManagersListManagedInstancesResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/listManagedInstances"
    };
  }

  rpc Patch(PatchInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}"
      body: "instance_group_manager_resource"
    };
  }

  rpc RecreateInstances(RecreateInstancesInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/recreateInstances"
      body: "instance_group_managers_recreate_instances_request_resource"
    };
  }

  rpc Resize(ResizeInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/resize"
    };
  }

  rpc SetInstanceTemplate(SetInstanceTemplateInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/setInstanceTemplate"
      body: "instance_group_managers_set_instance_template_request_resource"
    };
  }

  rpc SetTargetPools(SetTargetPoolsInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instance_group_manager}/setTargetPools"
      body: "instance_group_managers_set_target_pools_request_resource"
    };
  }

}

service InstanceGroups {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AddInstances(AddInstancesInstanceGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instance_group}/addInstances"
      body: "instance_groups_add_instances_request_resource"
    };
  }

  rpc AggregatedList(AggregatedListInstanceGroupsRequest) returns (InstanceGroupAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/instanceGroups"
    };
  }

  rpc Delete(DeleteInstanceGroupRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instance_group}"
    };
  }

  rpc Get(GetInstanceGroupRequest) returns (InstanceGroup) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instance_group}"
    };
  }

  rpc Insert(InsertInstanceGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroups"
      body: "instance_group_resource"
    };
  }

  rpc List(ListInstanceGroupsRequest) returns (InstanceGroupList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/instanceGroups"
    };
  }

  rpc ListInstances(ListInstancesInstanceGroupsRequest) returns (InstanceGroupsListInstances) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instance_group}/listInstances"
      body: "instance_groups_list_instances_request_resource"
    };
  }

  rpc RemoveInstances(RemoveInstancesInstanceGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instance_group}/removeInstances"
      body: "instance_groups_remove_instances_request_resource"
    };
  }

  rpc SetNamedPorts(SetNamedPortsInstanceGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instance_group}/setNamedPorts"
      body: "instance_groups_set_named_ports_request_resource"
    };
  }

}

service InstanceTemplates {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteInstanceTemplateRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/instanceTemplates/{instance_template}"
    };
  }

  rpc Get(GetInstanceTemplateRequest) returns (InstanceTemplate) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/instanceTemplates/{instance_template}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyInstanceTemplateRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertInstanceTemplateRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/instanceTemplates"
      body: "instance_template_resource"
    };
  }

  rpc List(ListInstanceTemplatesRequest) returns (InstanceTemplateList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/instanceTemplates"
    };
  }

  rpc SetIamPolicy(SetIamPolicyInstanceTemplateRequest) returns (Policy) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy"
      body: "global_set_policy_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsInstanceTemplateRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service Instances {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AddAccessConfig(AddAccessConfigInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig"
      body: "access_config_resource"
    };
  }

  rpc AddResourcePolicies(AddResourcePoliciesInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies"
      body: "instances_add_resource_policies_request_resource"
    };
  }

  rpc AggregatedList(AggregatedListInstancesRequest) returns (InstanceAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/instances"
    };
  }

  rpc AttachDisk(AttachDiskInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/attachDisk"
      body: "attached_disk_resource"
    };
  }

  rpc Delete(DeleteInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}"
    };
  }

  rpc DeleteAccessConfig(DeleteAccessConfigInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig"
    };
  }

  rpc DetachDisk(DetachDiskInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/detachDisk"
    };
  }

  rpc Get(GetInstanceRequest) returns (Instance) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}"
    };
  }

  rpc GetGuestAttributes(GetGuestAttributesInstanceRequest) returns (GuestAttributes) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes"
    };
  }

  rpc GetIamPolicy(GetIamPolicyInstanceRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy"
    };
  }

  rpc GetSerialPortOutput(GetSerialPortOutputInstanceRequest) returns (SerialPortOutput) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/serialPort"
    };
  }

  rpc GetShieldedInstanceIdentity(GetShieldedInstanceIdentityInstanceRequest) returns (ShieldedInstanceIdentity) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity"
    };
  }

  rpc Insert(InsertInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances"
      body: "instance_resource"
    };
  }

  rpc List(ListInstancesRequest) returns (InstanceList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/instances"
    };
  }

  rpc ListReferrers(ListReferrersInstancesRequest) returns (InstanceListReferrers) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/referrers"
    };
  }

  rpc RemoveResourcePolicies(RemoveResourcePoliciesInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies"
      body: "instances_remove_resource_policies_request_resource"
    };
  }

  rpc Reset(ResetInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/reset"
    };
  }

  rpc SetDeletionProtection(SetDeletionProtectionInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection"
    };
  }

  rpc SetDiskAutoDelete(SetDiskAutoDeleteInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete"
    };
  }

  rpc SetIamPolicy(SetIamPolicyInstanceRequest) returns (Policy) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy"
      body: "zone_set_policy_request_resource"
    };
  }

  rpc SetLabels(SetLabelsInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setLabels"
      body: "instances_set_labels_request_resource"
    };
  }

  rpc SetMachineResources(SetMachineResourcesInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources"
      body: "instances_set_machine_resources_request_resource"
    };
  }

  rpc SetMachineType(SetMachineTypeInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMachineType"
      body: "instances_set_machine_type_request_resource"
    };
  }

  rpc SetMetadata(SetMetadataInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMetadata"
      body: "metadata_resource"
    };
  }

  rpc SetMinCpuPlatform(SetMinCpuPlatformInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform"
      body: "instances_set_min_cpu_platform_request_resource"
    };
  }

  rpc SetScheduling(SetSchedulingInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setScheduling"
      body: "scheduling_resource"
    };
  }

  rpc SetServiceAccount(SetServiceAccountInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount"
      body: "instances_set_service_account_request_resource"
    };
  }

  rpc SetShieldedInstanceIntegrityPolicy(SetShieldedInstanceIntegrityPolicyInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy"
      body: "shielded_instance_integrity_policy_resource"
    };
  }

  rpc SetTags(SetTagsInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setTags"
      body: "tags_resource"
    };
  }

  rpc SimulateMaintenanceEvent(SimulateMaintenanceEventInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent"
    };
  }

  rpc Start(StartInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/start"
    };
  }

  rpc StartWithEncryptionKey(StartWithEncryptionKeyInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey"
      body: "instances_start_with_encryption_key_request_resource"
    };
  }

  rpc Stop(StopInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/stop"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsInstanceRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

  rpc Update(UpdateInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}"
      body: "instance_resource"
    };
  }

  rpc UpdateAccessConfig(UpdateAccessConfigInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig"
      body: "access_config_resource"
    };
  }

  rpc UpdateDisplayDevice(UpdateDisplayDeviceInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice"
      body: "display_device_resource"
    };
  }

  rpc UpdateNetworkInterface(UpdateNetworkInterfaceInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface"
      body: "network_interface_resource"
    };
  }

  rpc UpdateShieldedInstanceConfig(UpdateShieldedInstanceConfigInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig"
      body: "shielded_instance_config_resource"
    };
  }

}

service InterconnectAttachments {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListInterconnectAttachmentsRequest) returns (InterconnectAttachmentAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/interconnectAttachments"
    };
  }

  rpc Delete(DeleteInterconnectAttachmentRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnect_attachment}"
    };
  }

  rpc Get(GetInterconnectAttachmentRequest) returns (InterconnectAttachment) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnect_attachment}"
    };
  }

  rpc Insert(InsertInterconnectAttachmentRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/interconnectAttachments"
      body: "interconnect_attachment_resource"
    };
  }

  rpc List(ListInterconnectAttachmentsRequest) returns (InterconnectAttachmentList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/interconnectAttachments"
    };
  }

  rpc Patch(PatchInterconnectAttachmentRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnect_attachment}"
      body: "interconnect_attachment_resource"
    };
  }

}

service InterconnectLocations {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute.readonly,"
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Get(GetInterconnectLocationRequest) returns (InterconnectLocation) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/interconnectLocations/{interconnect_location}"
    };
  }

  rpc List(ListInterconnectLocationsRequest) returns (InterconnectLocationList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/interconnectLocations"
    };
  }

}

service Interconnects {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteInterconnectRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/interconnects/{interconnect}"
    };
  }

  rpc Get(GetInterconnectRequest) returns (Interconnect) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/interconnects/{interconnect}"
    };
  }

  rpc GetDiagnostics(GetDiagnosticsInterconnectRequest) returns (InterconnectsGetDiagnosticsResponse) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/interconnects/{interconnect}/getDiagnostics"
    };
  }

  rpc Insert(InsertInterconnectRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/interconnects"
      body: "interconnect_resource"
    };
  }

  rpc List(ListInterconnectsRequest) returns (InterconnectList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/interconnects"
    };
  }

  rpc Patch(PatchInterconnectRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/global/interconnects/{interconnect}"
      body: "interconnect_resource"
    };
  }

}

service LicenseCodes {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute.readonly,"
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Get(GetLicenseCodeRequest) returns (LicenseCode) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/licenseCodes/{license_code}"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsLicenseCodeRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/licenseCodes/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service Licenses {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteLicenseRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/licenses/{license}"
    };
  }

  rpc Get(GetLicenseRequest) returns (License) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/licenses/{license}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyLicenseRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/licenses/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertLicenseRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/licenses"
      body: "license_resource"
    };
  }

  rpc List(ListLicensesRequest) returns (LicensesListResponse) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/licenses"
    };
  }

  rpc SetIamPolicy(SetIamPolicyLicenseRequest) returns (Policy) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/licenses/{resource}/setIamPolicy"
      body: "global_set_policy_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsLicenseRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/licenses/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service MachineTypes {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute.readonly,"
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListMachineTypesRequest) returns (MachineTypeAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/machineTypes"
    };
  }

  rpc Get(GetMachineTypeRequest) returns (MachineType) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/machineTypes/{machine_type}"
    };
  }

  rpc List(ListMachineTypesRequest) returns (MachineTypeList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/machineTypes"
    };
  }

}

service NetworkEndpointGroups {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListNetworkEndpointGroupsRequest) returns (NetworkEndpointGroupAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/networkEndpointGroups"
    };
  }

  rpc AttachNetworkEndpoints(AttachNetworkEndpointsNetworkEndpointGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{network_endpoint_group}/attachNetworkEndpoints"
      body: "network_endpoint_groups_attach_endpoints_request_resource"
    };
  }

  rpc Delete(DeleteNetworkEndpointGroupRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{network_endpoint_group}"
    };
  }

  rpc DetachNetworkEndpoints(DetachNetworkEndpointsNetworkEndpointGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{network_endpoint_group}/detachNetworkEndpoints"
      body: "network_endpoint_groups_detach_endpoints_request_resource"
    };
  }

  rpc Get(GetNetworkEndpointGroupRequest) returns (NetworkEndpointGroup) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{network_endpoint_group}"
    };
  }

  rpc Insert(InsertNetworkEndpointGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups"
      body: "network_endpoint_group_resource"
    };
  }

  rpc List(ListNetworkEndpointGroupsRequest) returns (NetworkEndpointGroupList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups"
    };
  }

  rpc ListNetworkEndpoints(ListNetworkEndpointsNetworkEndpointGroupsRequest) returns (NetworkEndpointGroupsListNetworkEndpoints) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{network_endpoint_group}/listNetworkEndpoints"
      body: "network_endpoint_groups_list_endpoints_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsNetworkEndpointGroupRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service Networks {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AddPeering(AddPeeringNetworkRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/networks/{network}/addPeering"
      body: "networks_add_peering_request_resource"
    };
  }

  rpc Delete(DeleteNetworkRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/networks/{network}"
    };
  }

  rpc Get(GetNetworkRequest) returns (Network) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/networks/{network}"
    };
  }

  rpc Insert(InsertNetworkRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/networks"
      body: "network_resource"
    };
  }

  rpc List(ListNetworksRequest) returns (NetworkList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/networks"
    };
  }

  rpc ListPeeringRoutes(ListPeeringRoutesNetworksRequest) returns (ExchangedPeeringRoutesList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/networks/{network}/listPeeringRoutes"
    };
  }

  rpc Patch(PatchNetworkRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/global/networks/{network}"
      body: "network_resource"
    };
  }

  rpc RemovePeering(RemovePeeringNetworkRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/networks/{network}/removePeering"
      body: "networks_remove_peering_request_resource"
    };
  }

  rpc SwitchToCustomMode(SwitchToCustomModeNetworkRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/networks/{network}/switchToCustomMode"
    };
  }

  rpc UpdatePeering(UpdatePeeringNetworkRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/global/networks/{network}/updatePeering"
      body: "networks_update_peering_request_resource"
    };
  }

}

service NodeGroups {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AddNodes(AddNodesNodeGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{node_group}/addNodes"
      body: "node_groups_add_nodes_request_resource"
    };
  }

  rpc AggregatedList(AggregatedListNodeGroupsRequest) returns (NodeGroupAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/nodeGroups"
    };
  }

  rpc Delete(DeleteNodeGroupRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{node_group}"
    };
  }

  rpc DeleteNodes(DeleteNodesNodeGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{node_group}/deleteNodes"
      body: "node_groups_delete_nodes_request_resource"
    };
  }

  rpc Get(GetNodeGroupRequest) returns (NodeGroup) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{node_group}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyNodeGroupRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertNodeGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/nodeGroups"
      body: "node_group_resource"
    };
  }

  rpc List(ListNodeGroupsRequest) returns (NodeGroupList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/nodeGroups"
    };
  }

  rpc ListNodes(ListNodesNodeGroupsRequest) returns (NodeGroupsListNodes) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{node_group}/listNodes"
    };
  }

  rpc Patch(PatchNodeGroupRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{node_group}"
      body: "node_group_resource"
    };
  }

  rpc SetIamPolicy(SetIamPolicyNodeGroupRequest) returns (Policy) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy"
      body: "zone_set_policy_request_resource"
    };
  }

  rpc SetNodeTemplate(SetNodeTemplateNodeGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{node_group}/setNodeTemplate"
      body: "node_groups_set_node_template_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsNodeGroupRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service NodeTemplates {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListNodeTemplatesRequest) returns (NodeTemplateAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/nodeTemplates"
    };
  }

  rpc Delete(DeleteNodeTemplateRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{node_template}"
    };
  }

  rpc Get(GetNodeTemplateRequest) returns (NodeTemplate) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{node_template}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyNodeTemplateRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertNodeTemplateRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/nodeTemplates"
      body: "node_template_resource"
    };
  }

  rpc List(ListNodeTemplatesRequest) returns (NodeTemplateList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/nodeTemplates"
    };
  }

  rpc SetIamPolicy(SetIamPolicyNodeTemplateRequest) returns (Policy) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy"
      body: "region_set_policy_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsNodeTemplateRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service NodeTypes {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute.readonly,"
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListNodeTypesRequest) returns (NodeTypeAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/nodeTypes"
    };
  }

  rpc Get(GetNodeTypeRequest) returns (NodeType) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/nodeTypes/{node_type}"
    };
  }

  rpc List(ListNodeTypesRequest) returns (NodeTypeList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/nodeTypes"
    };
  }

}

service PacketMirrorings {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListPacketMirroringsRequest) returns (PacketMirroringAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/packetMirrorings"
    };
  }

  rpc Delete(DeletePacketMirroringRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/packetMirrorings/{packet_mirroring}"
    };
  }

  rpc Get(GetPacketMirroringRequest) returns (PacketMirroring) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/packetMirrorings/{packet_mirroring}"
    };
  }

  rpc Insert(InsertPacketMirroringRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/packetMirrorings"
      body: "packet_mirroring_resource"
    };
  }

  rpc List(ListPacketMirroringsRequest) returns (PacketMirroringList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/packetMirrorings"
    };
  }

  rpc Patch(PatchPacketMirroringRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/regions/{region}/packetMirrorings/{packet_mirroring}"
      body: "packet_mirroring_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsPacketMirroringRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service Projects {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc DisableXpnHost(DisableXpnHostProjectRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/disableXpnHost"
    };
  }

  rpc DisableXpnResource(DisableXpnResourceProjectRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/disableXpnResource"
      body: "projects_disable_xpn_resource_request_resource"
    };
  }

  rpc EnableXpnHost(EnableXpnHostProjectRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/enableXpnHost"
    };
  }

  rpc EnableXpnResource(EnableXpnResourceProjectRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/enableXpnResource"
      body: "projects_enable_xpn_resource_request_resource"
    };
  }

  rpc Get(GetProjectRequest) returns (Project) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}"
    };
  }

  rpc GetXpnHost(GetXpnHostProjectRequest) returns (Project) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/getXpnHost"
    };
  }

  rpc GetXpnResources(GetXpnResourcesProjectsRequest) returns (ProjectsGetXpnResources) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/getXpnResources"
    };
  }

  rpc ListXpnHosts(ListXpnHostsProjectsRequest) returns (XpnHostList) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/listXpnHosts"
      body: "projects_list_xpn_hosts_request_resource"
    };
  }

  rpc MoveDisk(MoveDiskProjectRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/moveDisk"
      body: "disk_move_request_resource"
    };
  }

  rpc MoveInstance(MoveInstanceProjectRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/moveInstance"
      body: "instance_move_request_resource"
    };
  }

  rpc SetCommonInstanceMetadata(SetCommonInstanceMetadataProjectRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/setCommonInstanceMetadata"
      body: "metadata_resource"
    };
  }

  rpc SetDefaultNetworkTier(SetDefaultNetworkTierProjectRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/setDefaultNetworkTier"
      body: "projects_set_default_network_tier_request_resource"
    };
  }

  rpc SetUsageExportBucket(SetUsageExportBucketProjectRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/setUsageExportBucket"
      body: "usage_export_location_resource"
    };
  }

}

service RegionAutoscalers {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteRegionAutoscalerRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/autoscalers/{autoscaler}"
    };
  }

  rpc Get(GetRegionAutoscalerRequest) returns (Autoscaler) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/autoscalers/{autoscaler}"
    };
  }

  rpc Insert(InsertRegionAutoscalerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/autoscalers"
      body: "autoscaler_resource"
    };
  }

  rpc List(ListRegionAutoscalersRequest) returns (RegionAutoscalerList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/autoscalers"
    };
  }

  rpc Patch(PatchRegionAutoscalerRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/regions/{region}/autoscalers"
      body: "autoscaler_resource"
    };
  }

  rpc Update(UpdateRegionAutoscalerRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/regions/{region}/autoscalers"
      body: "autoscaler_resource"
    };
  }

}

service RegionBackendServices {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteRegionBackendServiceRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/backendServices/{backend_service}"
    };
  }

  rpc Get(GetRegionBackendServiceRequest) returns (BackendService) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/backendServices/{backend_service}"
    };
  }

  rpc GetHealth(GetHealthRegionBackendServiceRequest) returns (BackendServiceGroupHealth) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/backendServices/{backend_service}/getHealth"
      body: "resource_group_reference_resource"
    };
  }

  rpc Insert(InsertRegionBackendServiceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/backendServices"
      body: "backend_service_resource"
    };
  }

  rpc List(ListRegionBackendServicesRequest) returns (BackendServiceList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/backendServices"
    };
  }

  rpc Patch(PatchRegionBackendServiceRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/regions/{region}/backendServices/{backend_service}"
      body: "backend_service_resource"
    };
  }

  rpc Update(UpdateRegionBackendServiceRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/regions/{region}/backendServices/{backend_service}"
      body: "backend_service_resource"
    };
  }

}

service RegionCommitments {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListRegionCommitmentsRequest) returns (CommitmentAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/commitments"
    };
  }

  rpc Get(GetRegionCommitmentRequest) returns (Commitment) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/commitments/{commitment}"
    };
  }

  rpc Insert(InsertRegionCommitmentRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/commitments"
      body: "commitment_resource"
    };
  }

  rpc List(ListRegionCommitmentsRequest) returns (CommitmentList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/commitments"
    };
  }

}

service RegionDiskTypes {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute.readonly,"
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Get(GetRegionDiskTypeRequest) returns (DiskType) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/diskTypes/{disk_type}"
    };
  }

  rpc List(ListRegionDiskTypesRequest) returns (RegionDiskTypeList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/diskTypes"
    };
  }

}

service RegionDisks {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AddResourcePolicies(AddResourcePoliciesRegionDiskRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies"
      body: "region_disks_add_resource_policies_request_resource"
    };
  }

  rpc CreateSnapshot(CreateSnapshotRegionDiskRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/disks/{disk}/createSnapshot"
      body: "snapshot_resource"
    };
  }

  rpc Delete(DeleteRegionDiskRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/disks/{disk}"
    };
  }

  rpc Get(GetRegionDiskRequest) returns (Disk) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/disks/{disk}"
    };
  }

  rpc Insert(InsertRegionDiskRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/disks"
      body: "disk_resource"
    };
  }

  rpc List(ListRegionDisksRequest) returns (DiskList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/disks"
    };
  }

  rpc RemoveResourcePolicies(RemoveResourcePoliciesRegionDiskRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies"
      body: "region_disks_remove_resource_policies_request_resource"
    };
  }

  rpc Resize(ResizeRegionDiskRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/disks/{disk}/resize"
      body: "region_disks_resize_request_resource"
    };
  }

  rpc SetLabels(SetLabelsRegionDiskRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/disks/{resource}/setLabels"
      body: "region_set_labels_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsRegionDiskRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service RegionHealthChecks {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteRegionHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/healthChecks/{health_check}"
    };
  }

  rpc Get(GetRegionHealthCheckRequest) returns (HealthCheck) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/healthChecks/{health_check}"
    };
  }

  rpc Insert(InsertRegionHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/healthChecks"
      body: "health_check_resource"
    };
  }

  rpc List(ListRegionHealthChecksRequest) returns (HealthCheckList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/healthChecks"
    };
  }

  rpc Patch(PatchRegionHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/regions/{region}/healthChecks/{health_check}"
      body: "health_check_resource"
    };
  }

  rpc Update(UpdateRegionHealthCheckRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/regions/{region}/healthChecks/{health_check}"
      body: "health_check_resource"
    };
  }

}

service RegionInstanceGroupManagers {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AbandonInstances(AbandonInstancesRegionInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instance_group_manager}/abandonInstances"
      body: "region_instance_group_managers_abandon_instances_request_resource"
    };
  }

  rpc ApplyUpdatesToInstances(ApplyUpdatesToInstancesRegionInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instance_group_manager}/applyUpdatesToInstances"
      body: "region_instance_group_managers_apply_updates_request_resource"
    };
  }

  rpc CreateInstances(CreateInstancesRegionInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instance_group_manager}/createInstances"
      body: "region_instance_group_managers_create_instances_request_resource"
    };
  }

  rpc Delete(DeleteRegionInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instance_group_manager}"
    };
  }

  rpc DeleteInstances(DeleteInstancesRegionInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instance_group_manager}/deleteInstances"
      body: "region_instance_group_managers_delete_instances_request_resource"
    };
  }

  rpc Get(GetRegionInstanceGroupManagerRequest) returns (InstanceGroupManager) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instance_group_manager}"
    };
  }

  rpc Insert(InsertRegionInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers"
      body: "instance_group_manager_resource"
    };
  }

  rpc List(ListRegionInstanceGroupManagersRequest) returns (RegionInstanceGroupManagerList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers"
    };
  }

  rpc ListErrors(ListErrorsRegionInstanceGroupManagersRequest) returns (RegionInstanceGroupManagersListErrorsResponse) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instance_group_manager}/listErrors"
    };
  }

  rpc ListManagedInstances(ListManagedInstancesRegionInstanceGroupManagersRequest) returns (RegionInstanceGroupManagersListInstancesResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instance_group_manager}/listManagedInstances"
    };
  }

  rpc Patch(PatchRegionInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instance_group_manager}"
      body: "instance_group_manager_resource"
    };
  }

  rpc RecreateInstances(RecreateInstancesRegionInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instance_group_manager}/recreateInstances"
      body: "region_instance_group_managers_recreate_request_resource"
    };
  }

  rpc Resize(ResizeRegionInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instance_group_manager}/resize"
    };
  }

  rpc SetInstanceTemplate(SetInstanceTemplateRegionInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instance_group_manager}/setInstanceTemplate"
      body: "region_instance_group_managers_set_template_request_resource"
    };
  }

  rpc SetTargetPools(SetTargetPoolsRegionInstanceGroupManagerRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instance_group_manager}/setTargetPools"
      body: "region_instance_group_managers_set_target_pools_request_resource"
    };
  }

}

service RegionInstanceGroups {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Get(GetRegionInstanceGroupRequest) returns (InstanceGroup) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instance_group}"
    };
  }

  rpc List(ListRegionInstanceGroupsRequest) returns (RegionInstanceGroupList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/instanceGroups"
    };
  }

  rpc ListInstances(ListInstancesRegionInstanceGroupsRequest) returns (RegionInstanceGroupsListInstances) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instance_group}/listInstances"
      body: "region_instance_groups_list_instances_request_resource"
    };
  }

  rpc SetNamedPorts(SetNamedPortsRegionInstanceGroupRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instance_group}/setNamedPorts"
      body: "region_instance_groups_set_named_ports_request_resource"
    };
  }

}

service RegionOperations {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteRegionOperationRequest) returns (DeleteRegionOperationResponse) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/operations/{operation}"
    };
  }

  rpc Get(GetRegionOperationRequest) returns (Operation) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/operations/{operation}"
    };
  }

  rpc List(ListRegionOperationsRequest) returns (OperationList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/operations"
    };
  }

  rpc Wait(WaitRegionOperationRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/operations/{operation}/wait"
    };
  }

}

service RegionSslCertificates {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteRegionSslCertificateRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/sslCertificates/{ssl_certificate}"
    };
  }

  rpc Get(GetRegionSslCertificateRequest) returns (SslCertificate) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/sslCertificates/{ssl_certificate}"
    };
  }

  rpc Insert(InsertRegionSslCertificateRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/sslCertificates"
      body: "ssl_certificate_resource"
    };
  }

  rpc List(ListRegionSslCertificatesRequest) returns (SslCertificateList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/sslCertificates"
    };
  }

}

service RegionTargetHttpProxies {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteRegionTargetHttpProxyRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/targetHttpProxies/{target_http_proxy}"
    };
  }

  rpc Get(GetRegionTargetHttpProxyRequest) returns (TargetHttpProxy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/targetHttpProxies/{target_http_proxy}"
    };
  }

  rpc Insert(InsertRegionTargetHttpProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/targetHttpProxies"
      body: "target_http_proxy_resource"
    };
  }

  rpc List(ListRegionTargetHttpProxiesRequest) returns (TargetHttpProxyList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/targetHttpProxies"
    };
  }

  rpc SetUrlMap(SetUrlMapRegionTargetHttpProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/targetHttpProxies/{target_http_proxy}/setUrlMap"
      body: "url_map_reference_resource"
    };
  }

}

service RegionTargetHttpsProxies {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteRegionTargetHttpsProxyRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/targetHttpsProxies/{target_https_proxy}"
    };
  }

  rpc Get(GetRegionTargetHttpsProxyRequest) returns (TargetHttpsProxy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/targetHttpsProxies/{target_https_proxy}"
    };
  }

  rpc Insert(InsertRegionTargetHttpsProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/targetHttpsProxies"
      body: "target_https_proxy_resource"
    };
  }

  rpc List(ListRegionTargetHttpsProxiesRequest) returns (TargetHttpsProxyList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/targetHttpsProxies"
    };
  }

  rpc SetSslCertificates(SetSslCertificatesRegionTargetHttpsProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/targetHttpsProxies/{target_https_proxy}/setSslCertificates"
      body: "region_target_https_proxies_set_ssl_certificates_request_resource"
    };
  }

  rpc SetUrlMap(SetUrlMapRegionTargetHttpsProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/targetHttpsProxies/{target_https_proxy}/setUrlMap"
      body: "url_map_reference_resource"
    };
  }

}

service RegionUrlMaps {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteRegionUrlMapRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/urlMaps/{url_map}"
    };
  }

  rpc Get(GetRegionUrlMapRequest) returns (UrlMap) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/urlMaps/{url_map}"
    };
  }

  rpc Insert(InsertRegionUrlMapRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/urlMaps"
      body: "url_map_resource"
    };
  }

  rpc List(ListRegionUrlMapsRequest) returns (UrlMapList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/urlMaps"
    };
  }

  rpc Patch(PatchRegionUrlMapRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/regions/{region}/urlMaps/{url_map}"
      body: "url_map_resource"
    };
  }

  rpc Update(UpdateRegionUrlMapRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/regions/{region}/urlMaps/{url_map}"
      body: "url_map_resource"
    };
  }

  rpc Validate(ValidateRegionUrlMapRequest) returns (UrlMapsValidateResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/urlMaps/{url_map}/validate"
      body: "region_url_maps_validate_request_resource"
    };
  }

}

service Regions {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute.readonly,"
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Get(GetRegionRequest) returns (Region) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}"
    };
  }

  rpc List(ListRegionsRequest) returns (RegionList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions"
    };
  }

}

service Reservations {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListReservationsRequest) returns (ReservationAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/reservations"
    };
  }

  rpc Delete(DeleteReservationRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/zones/{zone}/reservations/{reservation}"
    };
  }

  rpc Get(GetReservationRequest) returns (Reservation) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/reservations/{reservation}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyReservationRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertReservationRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/reservations"
      body: "reservation_resource"
    };
  }

  rpc List(ListReservationsRequest) returns (ReservationList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/reservations"
    };
  }

  rpc Resize(ResizeReservationRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/reservations/{reservation}/resize"
      body: "reservations_resize_request_resource"
    };
  }

  rpc SetIamPolicy(SetIamPolicyReservationRequest) returns (Policy) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy"
      body: "zone_set_policy_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsReservationRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service ResourcePolicies {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListResourcePoliciesRequest) returns (ResourcePolicyAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/resourcePolicies"
    };
  }

  rpc Delete(DeleteResourcePolicyRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/resourcePolicies/{resource_policy}"
    };
  }

  rpc Get(GetResourcePolicyRequest) returns (ResourcePolicy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/resourcePolicies/{resource_policy}"
    };
  }

  rpc GetIamPolicy(GetIamPolicyResourcePolicyRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertResourcePolicyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/resourcePolicies"
      body: "resource_policy_resource"
    };
  }

  rpc List(ListResourcePoliciesRequest) returns (ResourcePolicyList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/resourcePolicies"
    };
  }

  rpc SetIamPolicy(SetIamPolicyResourcePolicyRequest) returns (Policy) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy"
      body: "region_set_policy_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsResourcePolicyRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service Routers {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListRoutersRequest) returns (RouterAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/routers"
    };
  }

  rpc Delete(DeleteRouterRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/routers/{router}"
    };
  }

  rpc Get(GetRouterRequest) returns (Router) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/routers/{router}"
    };
  }

  rpc GetNatMappingInfo(GetNatMappingInfoRoutersRequest) returns (VmEndpointNatMappingsList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo"
    };
  }

  rpc GetRouterStatus(GetRouterStatusRouterRequest) returns (RouterStatusResponse) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/routers/{router}/getRouterStatus"
    };
  }

  rpc Insert(InsertRouterRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/routers"
      body: "router_resource"
    };
  }

  rpc List(ListRoutersRequest) returns (RouterList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/routers"
    };
  }

  rpc Patch(PatchRouterRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/regions/{region}/routers/{router}"
      body: "router_resource"
    };
  }

  rpc Preview(PreviewRouterRequest) returns (RoutersPreviewResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/routers/{router}/preview"
      body: "router_resource"
    };
  }

  rpc Update(UpdateRouterRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/regions/{region}/routers/{router}"
      body: "router_resource"
    };
  }

}

service Routes {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteRouteRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/routes/{route}"
    };
  }

  rpc Get(GetRouteRequest) returns (Route) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/routes/{route}"
    };
  }

  rpc Insert(InsertRouteRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/routes"
      body: "route_resource"
    };
  }

  rpc List(ListRoutesRequest) returns (RouteList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/routes"
    };
  }

}

service SecurityPolicies {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AddRule(AddRuleSecurityPolicyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/securityPolicies/{security_policy}/addRule"
      body: "security_policy_rule_resource"
    };
  }

  rpc Delete(DeleteSecurityPolicyRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/securityPolicies/{security_policy}"
    };
  }

  rpc Get(GetSecurityPolicyRequest) returns (SecurityPolicy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/securityPolicies/{security_policy}"
    };
  }

  rpc GetRule(GetRuleSecurityPolicyRequest) returns (SecurityPolicyRule) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/securityPolicies/{security_policy}/getRule"
    };
  }

  rpc Insert(InsertSecurityPolicyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/securityPolicies"
      body: "security_policy_resource"
    };
  }

  rpc List(ListSecurityPoliciesRequest) returns (SecurityPolicyList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/securityPolicies"
    };
  }

  rpc Patch(PatchSecurityPolicyRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/global/securityPolicies/{security_policy}"
      body: "security_policy_resource"
    };
  }

  rpc PatchRule(PatchRuleSecurityPolicyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/securityPolicies/{security_policy}/patchRule"
      body: "security_policy_rule_resource"
    };
  }

  rpc RemoveRule(RemoveRuleSecurityPolicyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/securityPolicies/{security_policy}/removeRule"
    };
  }

}

service Snapshots {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteSnapshotRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/snapshots/{snapshot}"
    };
  }

  rpc Get(GetSnapshotRequest) returns (Snapshot) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/snapshots/{snapshot}"
    };
  }

  rpc GetIamPolicy(GetIamPolicySnapshotRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/snapshots/{resource}/getIamPolicy"
    };
  }

  rpc List(ListSnapshotsRequest) returns (SnapshotList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/snapshots"
    };
  }

  rpc SetIamPolicy(SetIamPolicySnapshotRequest) returns (Policy) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/snapshots/{resource}/setIamPolicy"
      body: "global_set_policy_request_resource"
    };
  }

  rpc SetLabels(SetLabelsSnapshotRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/snapshots/{resource}/setLabels"
      body: "global_set_labels_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsSnapshotRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/snapshots/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service SslCertificates {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListSslCertificatesRequest) returns (SslCertificateAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/sslCertificates"
    };
  }

  rpc Delete(DeleteSslCertificateRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/sslCertificates/{ssl_certificate}"
    };
  }

  rpc Get(GetSslCertificateRequest) returns (SslCertificate) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/sslCertificates/{ssl_certificate}"
    };
  }

  rpc Insert(InsertSslCertificateRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/sslCertificates"
      body: "ssl_certificate_resource"
    };
  }

  rpc List(ListSslCertificatesRequest) returns (SslCertificateList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/sslCertificates"
    };
  }

}

service SslPolicies {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteSslPolicyRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/sslPolicies/{ssl_policy}"
    };
  }

  rpc Get(GetSslPolicyRequest) returns (SslPolicy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/sslPolicies/{ssl_policy}"
    };
  }

  rpc Insert(InsertSslPolicyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/sslPolicies"
      body: "ssl_policy_resource"
    };
  }

  rpc List(ListSslPoliciesRequest) returns (SslPoliciesList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/sslPolicies"
    };
  }

  rpc ListAvailableFeatures(ListAvailableFeaturesSslPoliciesRequest) returns (SslPoliciesListAvailableFeaturesResponse) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/sslPolicies/listAvailableFeatures"
    };
  }

  rpc Patch(PatchSslPolicyRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/global/sslPolicies/{ssl_policy}"
      body: "ssl_policy_resource"
    };
  }

}

service Subnetworks {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListSubnetworksRequest) returns (SubnetworkAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/subnetworks"
    };
  }

  rpc Delete(DeleteSubnetworkRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}"
    };
  }

  rpc ExpandIpCidrRange(ExpandIpCidrRangeSubnetworkRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange"
      body: "subnetworks_expand_ip_cidr_range_request_resource"
    };
  }

  rpc Get(GetSubnetworkRequest) returns (Subnetwork) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}"
    };
  }

  rpc GetIamPolicy(GetIamPolicySubnetworkRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy"
    };
  }

  rpc Insert(InsertSubnetworkRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/subnetworks"
      body: "subnetwork_resource"
    };
  }

  rpc List(ListSubnetworksRequest) returns (SubnetworkList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/subnetworks"
    };
  }

  rpc ListUsable(ListUsableSubnetworksRequest) returns (UsableSubnetworksAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/subnetworks/listUsable"
    };
  }

  rpc Patch(PatchSubnetworkRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}"
      body: "subnetwork_resource"
    };
  }

  rpc SetIamPolicy(SetIamPolicySubnetworkRequest) returns (Policy) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy"
      body: "region_set_policy_request_resource"
    };
  }

  rpc SetPrivateIpGoogleAccess(SetPrivateIpGoogleAccessSubnetworkRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess"
      body: "subnetworks_set_private_ip_google_access_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsSubnetworkRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service TargetHttpProxies {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListTargetHttpProxiesRequest) returns (TargetHttpProxyAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/targetHttpProxies"
    };
  }

  rpc Delete(DeleteTargetHttpProxyRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/targetHttpProxies/{target_http_proxy}"
    };
  }

  rpc Get(GetTargetHttpProxyRequest) returns (TargetHttpProxy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/targetHttpProxies/{target_http_proxy}"
    };
  }

  rpc Insert(InsertTargetHttpProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/targetHttpProxies"
      body: "target_http_proxy_resource"
    };
  }

  rpc List(ListTargetHttpProxiesRequest) returns (TargetHttpProxyList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/targetHttpProxies"
    };
  }

  rpc SetUrlMap(SetUrlMapTargetHttpProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/targetHttpProxies/{target_http_proxy}/setUrlMap"
      body: "url_map_reference_resource"
    };
  }

}

service TargetHttpsProxies {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListTargetHttpsProxiesRequest) returns (TargetHttpsProxyAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/targetHttpsProxies"
    };
  }

  rpc Delete(DeleteTargetHttpsProxyRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/targetHttpsProxies/{target_https_proxy}"
    };
  }

  rpc Get(GetTargetHttpsProxyRequest) returns (TargetHttpsProxy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/targetHttpsProxies/{target_https_proxy}"
    };
  }

  rpc Insert(InsertTargetHttpsProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/targetHttpsProxies"
      body: "target_https_proxy_resource"
    };
  }

  rpc List(ListTargetHttpsProxiesRequest) returns (TargetHttpsProxyList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/targetHttpsProxies"
    };
  }

  rpc SetQuicOverride(SetQuicOverrideTargetHttpsProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/targetHttpsProxies/{target_https_proxy}/setQuicOverride"
      body: "target_https_proxies_set_quic_override_request_resource"
    };
  }

  rpc SetSslCertificates(SetSslCertificatesTargetHttpsProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/targetHttpsProxies/{target_https_proxy}/setSslCertificates"
      body: "target_https_proxies_set_ssl_certificates_request_resource"
    };
  }

  rpc SetSslPolicy(SetSslPolicyTargetHttpsProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/targetHttpsProxies/{target_https_proxy}/setSslPolicy"
      body: "ssl_policy_reference_resource"
    };
  }

  rpc SetUrlMap(SetUrlMapTargetHttpsProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/targetHttpsProxies/{target_https_proxy}/setUrlMap"
      body: "url_map_reference_resource"
    };
  }

}

service TargetInstances {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListTargetInstancesRequest) returns (TargetInstanceAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/targetInstances"
    };
  }

  rpc Delete(DeleteTargetInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/zones/{zone}/targetInstances/{target_instance}"
    };
  }

  rpc Get(GetTargetInstanceRequest) returns (TargetInstance) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/targetInstances/{target_instance}"
    };
  }

  rpc Insert(InsertTargetInstanceRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/targetInstances"
      body: "target_instance_resource"
    };
  }

  rpc List(ListTargetInstancesRequest) returns (TargetInstanceList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/targetInstances"
    };
  }

}

service TargetPools {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AddHealthCheck(AddHealthCheckTargetPoolRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/targetPools/{target_pool}/addHealthCheck"
      body: "target_pools_add_health_check_request_resource"
    };
  }

  rpc AddInstance(AddInstanceTargetPoolRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/targetPools/{target_pool}/addInstance"
      body: "target_pools_add_instance_request_resource"
    };
  }

  rpc AggregatedList(AggregatedListTargetPoolsRequest) returns (TargetPoolAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/targetPools"
    };
  }

  rpc Delete(DeleteTargetPoolRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/targetPools/{target_pool}"
    };
  }

  rpc Get(GetTargetPoolRequest) returns (TargetPool) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/targetPools/{target_pool}"
    };
  }

  rpc GetHealth(GetHealthTargetPoolRequest) returns (TargetPoolInstanceHealth) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/targetPools/{target_pool}/getHealth"
      body: "instance_reference_resource"
    };
  }

  rpc Insert(InsertTargetPoolRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/targetPools"
      body: "target_pool_resource"
    };
  }

  rpc List(ListTargetPoolsRequest) returns (TargetPoolList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/targetPools"
    };
  }

  rpc RemoveHealthCheck(RemoveHealthCheckTargetPoolRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/targetPools/{target_pool}/removeHealthCheck"
      body: "target_pools_remove_health_check_request_resource"
    };
  }

  rpc RemoveInstance(RemoveInstanceTargetPoolRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/targetPools/{target_pool}/removeInstance"
      body: "target_pools_remove_instance_request_resource"
    };
  }

  rpc SetBackup(SetBackupTargetPoolRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/targetPools/{target_pool}/setBackup"
      body: "target_reference_resource"
    };
  }

}

service TargetSslProxies {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteTargetSslProxyRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/targetSslProxies/{target_ssl_proxy}"
    };
  }

  rpc Get(GetTargetSslProxyRequest) returns (TargetSslProxy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/targetSslProxies/{target_ssl_proxy}"
    };
  }

  rpc Insert(InsertTargetSslProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/targetSslProxies"
      body: "target_ssl_proxy_resource"
    };
  }

  rpc List(ListTargetSslProxiesRequest) returns (TargetSslProxyList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/targetSslProxies"
    };
  }

  rpc SetBackendService(SetBackendServiceTargetSslProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/targetSslProxies/{target_ssl_proxy}/setBackendService"
      body: "target_ssl_proxies_set_backend_service_request_resource"
    };
  }

  rpc SetProxyHeader(SetProxyHeaderTargetSslProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/targetSslProxies/{target_ssl_proxy}/setProxyHeader"
      body: "target_ssl_proxies_set_proxy_header_request_resource"
    };
  }

  rpc SetSslCertificates(SetSslCertificatesTargetSslProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/targetSslProxies/{target_ssl_proxy}/setSslCertificates"
      body: "target_ssl_proxies_set_ssl_certificates_request_resource"
    };
  }

  rpc SetSslPolicy(SetSslPolicyTargetSslProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/targetSslProxies/{target_ssl_proxy}/setSslPolicy"
      body: "ssl_policy_reference_resource"
    };
  }

}

service TargetTcpProxies {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteTargetTcpProxyRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/targetTcpProxies/{target_tcp_proxy}"
    };
  }

  rpc Get(GetTargetTcpProxyRequest) returns (TargetTcpProxy) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/targetTcpProxies/{target_tcp_proxy}"
    };
  }

  rpc Insert(InsertTargetTcpProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/targetTcpProxies"
      body: "target_tcp_proxy_resource"
    };
  }

  rpc List(ListTargetTcpProxiesRequest) returns (TargetTcpProxyList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/targetTcpProxies"
    };
  }

  rpc SetBackendService(SetBackendServiceTargetTcpProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/targetTcpProxies/{target_tcp_proxy}/setBackendService"
      body: "target_tcp_proxies_set_backend_service_request_resource"
    };
  }

  rpc SetProxyHeader(SetProxyHeaderTargetTcpProxyRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/targetTcpProxies/{target_tcp_proxy}/setProxyHeader"
      body: "target_tcp_proxies_set_proxy_header_request_resource"
    };
  }

}

service TargetVpnGateways {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListTargetVpnGatewaysRequest) returns (TargetVpnGatewayAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/targetVpnGateways"
    };
  }

  rpc Delete(DeleteTargetVpnGatewayRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/targetVpnGateways/{target_vpn_gateway}"
    };
  }

  rpc Get(GetTargetVpnGatewayRequest) returns (TargetVpnGateway) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/targetVpnGateways/{target_vpn_gateway}"
    };
  }

  rpc Insert(InsertTargetVpnGatewayRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/targetVpnGateways"
      body: "target_vpn_gateway_resource"
    };
  }

  rpc List(ListTargetVpnGatewaysRequest) returns (TargetVpnGatewayList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/targetVpnGateways"
    };
  }

}

service UrlMaps {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListUrlMapsRequest) returns (UrlMapsAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/urlMaps"
    };
  }

  rpc Delete(DeleteUrlMapRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/global/urlMaps/{url_map}"
    };
  }

  rpc Get(GetUrlMapRequest) returns (UrlMap) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/urlMaps/{url_map}"
    };
  }

  rpc Insert(InsertUrlMapRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/urlMaps"
      body: "url_map_resource"
    };
  }

  rpc InvalidateCache(InvalidateCacheUrlMapRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/urlMaps/{url_map}/invalidateCache"
      body: "cache_invalidation_rule_resource"
    };
  }

  rpc List(ListUrlMapsRequest) returns (UrlMapList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/global/urlMaps"
    };
  }

  rpc Patch(PatchUrlMapRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/compute/v1/projects/{project}/global/urlMaps/{url_map}"
      body: "url_map_resource"
    };
  }

  rpc Update(UpdateUrlMapRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/compute/v1/projects/{project}/global/urlMaps/{url_map}"
      body: "url_map_resource"
    };
  }

  rpc Validate(ValidateUrlMapRequest) returns (UrlMapsValidateResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/global/urlMaps/{url_map}/validate"
      body: "url_maps_validate_request_resource"
    };
  }

}

service VpnGateways {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListVpnGatewaysRequest) returns (VpnGatewayAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/vpnGateways"
    };
  }

  rpc Delete(DeleteVpnGatewayRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/vpnGateways/{vpn_gateway}"
    };
  }

  rpc Get(GetVpnGatewayRequest) returns (VpnGateway) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/vpnGateways/{vpn_gateway}"
    };
  }

  rpc GetStatus(GetStatusVpnGatewayRequest) returns (VpnGatewaysGetStatusResponse) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/vpnGateways/{vpn_gateway}/getStatus"
    };
  }

  rpc Insert(InsertVpnGatewayRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/vpnGateways"
      body: "vpn_gateway_resource"
    };
  }

  rpc List(ListVpnGatewaysRequest) returns (VpnGatewayList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/vpnGateways"
    };
  }

  rpc SetLabels(SetLabelsVpnGatewayRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels"
      body: "region_set_labels_request_resource"
    };
  }

  rpc TestIamPermissions(TestIamPermissionsVpnGatewayRequest) returns (TestPermissionsResponse) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions"
      body: "test_permissions_request_resource"
    };
  }

}

service VpnTunnels {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc AggregatedList(AggregatedListVpnTunnelsRequest) returns (VpnTunnelAggregatedList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/aggregated/vpnTunnels"
    };
  }

  rpc Delete(DeleteVpnTunnelRequest) returns (Operation) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/regions/{region}/vpnTunnels/{vpn_tunnel}"
    };
  }

  rpc Get(GetVpnTunnelRequest) returns (VpnTunnel) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/vpnTunnels/{vpn_tunnel}"
    };
  }

  rpc Insert(InsertVpnTunnelRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/regions/{region}/vpnTunnels"
      body: "vpn_tunnel_resource"
    };
  }

  rpc List(ListVpnTunnelsRequest) returns (VpnTunnelList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/regions/{region}/vpnTunnels"
    };
  }

}

service ZoneOperations {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Delete(DeleteZoneOperationRequest) returns (DeleteZoneOperationResponse) {
    option (google.api.http) = {
      delete: "/compute/v1/projects/{project}/zones/{zone}/operations/{operation}"
    };
  }

  rpc Get(GetZoneOperationRequest) returns (Operation) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/operations/{operation}"
    };
  }

  rpc List(ListZoneOperationsRequest) returns (OperationList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}/operations"
    };
  }

  rpc Wait(WaitZoneOperationRequest) returns (Operation) {
    option (google.api.http) = {
      post: "/compute/v1/projects/{project}/zones/{zone}/operations/{operation}/wait"
    };
  }

}

service Zones {
  option (google.api.default_host) =
    "compute.googleapis.com";

  option (google.api.oauth_scopes) =
    "https://www.googleapis.com/auth/compute.readonly,"
    "https://www.googleapis.com/auth/compute,"
    "https://www.googleapis.com/auth/cloud-platform";

  rpc Get(GetZoneRequest) returns (Zone) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones/{zone}"
    };
  }

  rpc List(ListZonesRequest) returns (ZoneList) {
    option (google.api.http) = {
      get: "/compute/v1/projects/{project}/zones"
    };
  }

}

